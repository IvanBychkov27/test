// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.3
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BinderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BinderRequest) Reset() {
	*x = BinderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinderRequest) ProtoMessage() {}

func (x *BinderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinderRequest.ProtoReflect.Descriptor instead.
func (*BinderRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *BinderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CachejobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Data2 string `protobuf:"bytes,2,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *CachejobResponse) Reset() {
	*x = CachejobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachejobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachejobResponse) ProtoMessage() {}

func (x *CachejobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachejobResponse.ProtoReflect.Descriptor instead.
func (*CachejobResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *CachejobResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *CachejobResponse) GetData2() string {
	if x != nil {
		return x.Data2
	}
	return ""
}

type CachejobDSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data1 []*DSP `protobuf:"bytes,1,rep,name=data1,proto3" json:"data1,omitempty"`
	Data2 []*DSP `protobuf:"bytes,2,rep,name=data2,proto3" json:"data2,omitempty"`
}

func (x *CachejobDSP) Reset() {
	*x = CachejobDSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachejobDSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachejobDSP) ProtoMessage() {}

func (x *CachejobDSP) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachejobDSP.ProtoReflect.Descriptor instead.
func (*CachejobDSP) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *CachejobDSP) GetData1() []*DSP {
	if x != nil {
		return x.Data1
	}
	return nil
}

func (x *CachejobDSP) GetData2() []*DSP {
	if x != nil {
		return x.Data2
	}
	return nil
}

type CachejobDPL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data1 []*DPL `protobuf:"bytes,1,rep,name=data1,proto3" json:"data1,omitempty"`
	Data2 []*DPL `protobuf:"bytes,2,rep,name=data2,proto3" json:"data2,omitempty"`
}

func (x *CachejobDPL) Reset() {
	*x = CachejobDPL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachejobDPL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachejobDPL) ProtoMessage() {}

func (x *CachejobDPL) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachejobDPL.ProtoReflect.Descriptor instead.
func (*CachejobDPL) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *CachejobDPL) GetData1() []*DPL {
	if x != nil {
		return x.Data1
	}
	return nil
}

func (x *CachejobDPL) GetData2() []*DPL {
	if x != nil {
		return x.Data2
	}
	return nil
}

type CachejobDefaultDPL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DefaultDPL `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CachejobDefaultDPL) Reset() {
	*x = CachejobDefaultDPL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachejobDefaultDPL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachejobDefaultDPL) ProtoMessage() {}

func (x *CachejobDefaultDPL) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachejobDefaultDPL.ProtoReflect.Descriptor instead.
func (*CachejobDefaultDPL) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *CachejobDefaultDPL) GetData() []*DefaultDPL {
	if x != nil {
		return x.Data
	}
	return nil
}

type CachejobCampaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Campaign `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CachejobCampaign) Reset() {
	*x = CachejobCampaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachejobCampaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachejobCampaign) ProtoMessage() {}

func (x *CachejobCampaign) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachejobCampaign.ProtoReflect.Descriptor instead.
func (*CachejobCampaign) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *CachejobCampaign) GetData() []*Campaign {
	if x != nil {
		return x.Data
	}
	return nil
}

type CachejobUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*User `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CachejobUser) Reset() {
	*x = CachejobUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachejobUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachejobUser) ProtoMessage() {}

func (x *CachejobUser) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachejobUser.ProtoReflect.Descriptor instead.
func (*CachejobUser) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *CachejobUser) GetData() []*User {
	if x != nil {
		return x.Data
	}
	return nil
}

type CachejobEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Endpoint `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CachejobEndpoint) Reset() {
	*x = CachejobEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachejobEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachejobEndpoint) ProtoMessage() {}

func (x *CachejobEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachejobEndpoint.ProtoReflect.Descriptor instead.
func (*CachejobEndpoint) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *CachejobEndpoint) GetData() []*Endpoint {
	if x != nil {
		return x.Data
	}
	return nil
}

type CachejobFastFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FastFilter `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CachejobFastFilter) Reset() {
	*x = CachejobFastFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachejobFastFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachejobFastFilter) ProtoMessage() {}

func (x *CachejobFastFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachejobFastFilter.ProtoReflect.Descriptor instead.
func (*CachejobFastFilter) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *CachejobFastFilter) GetData() []*FastFilter {
	if x != nil {
		return x.Data
	}
	return nil
}

type CachejobWidgets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Widgets `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CachejobWidgets) Reset() {
	*x = CachejobWidgets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachejobWidgets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachejobWidgets) ProtoMessage() {}

func (x *CachejobWidgets) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachejobWidgets.ProtoReflect.Descriptor instead.
func (*CachejobWidgets) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *CachejobWidgets) GetData() []*Widgets {
	if x != nil {
		return x.Data
	}
	return nil
}

type CachejobOptlists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Optlists `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CachejobOptlists) Reset() {
	*x = CachejobOptlists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachejobOptlists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachejobOptlists) ProtoMessage() {}

func (x *CachejobOptlists) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachejobOptlists.ProtoReflect.Descriptor instead.
func (*CachejobOptlists) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *CachejobOptlists) GetData() []*Optlists {
	if x != nil {
		return x.Data
	}
	return nil
}

type CachejobPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CachejobPing) Reset() {
	*x = CachejobPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachejobPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachejobPing) ProtoMessage() {}

func (x *CachejobPing) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachejobPing.ProtoReflect.Descriptor instead.
func (*CachejobPing) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *CachejobPing) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type CachejobToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CachejobToken) Reset() {
	*x = CachejobToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachejobToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachejobToken) ProtoMessage() {}

func (x *CachejobToken) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachejobToken.ProtoReflect.Descriptor instead.
func (*CachejobToken) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *CachejobToken) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type DSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                                  int64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	NetworkID                           int64   `protobuf:"varint,2,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	URL                                 string  `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
	PaymentTarget                       int64   `protobuf:"varint,4,opt,name=PaymentTarget,proto3" json:"PaymentTarget,omitempty"`
	PaymentType                         int64   `protobuf:"varint,5,opt,name=PaymentType,proto3" json:"PaymentType,omitempty"`
	Rate                                int64   `protobuf:"varint,6,opt,name=Rate,proto3" json:"Rate,omitempty"`
	Method                              int64   `protobuf:"varint,7,opt,name=Method,proto3" json:"Method,omitempty"`
	RequestType                         int64   `protobuf:"varint,8,opt,name=RequestType,proto3" json:"RequestType,omitempty"`
	ResponseType                        int64   `protobuf:"varint,9,opt,name=ResponseType,proto3" json:"ResponseType,omitempty"`
	AdvertiserID                        int64   `protobuf:"varint,10,opt,name=AdvertiserID,proto3" json:"AdvertiserID,omitempty"`
	CustomResponseSettings              string  `protobuf:"bytes,11,opt,name=CustomResponseSettings,proto3" json:"CustomResponseSettings,omitempty"`
	TrafficType                         int64   `protobuf:"varint,12,opt,name=TrafficType,proto3" json:"TrafficType,omitempty"`
	AdvertiserRate                      int64   `protobuf:"varint,13,opt,name=AdvertiserRate,proto3" json:"AdvertiserRate,omitempty"`
	Tags                                []int64 `protobuf:"varint,14,rep,packed,name=Tags,proto3" json:"Tags,omitempty"`
	RulesToUsersAllow                   []int64 `protobuf:"varint,15,rep,packed,name=RulesToUsersAllow,proto3" json:"RulesToUsersAllow,omitempty"`
	RulesToUsersAllowType               int64   `protobuf:"varint,16,opt,name=RulesToUsersAllowType,proto3" json:"RulesToUsersAllowType,omitempty"`
	RulesToUsersDeny                    []int64 `protobuf:"varint,17,rep,packed,name=RulesToUsersDeny,proto3" json:"RulesToUsersDeny,omitempty"`
	RulesToUsersDenyType                int64   `protobuf:"varint,18,opt,name=RulesToUsersDenyType,proto3" json:"RulesToUsersDenyType,omitempty"`
	RulesToEndpointsAllow               []int64 `protobuf:"varint,19,rep,packed,name=RulesToEndpointsAllow,proto3" json:"RulesToEndpointsAllow,omitempty"`
	RulesToEndpointsAllowType           int64   `protobuf:"varint,20,opt,name=RulesToEndpointsAllowType,proto3" json:"RulesToEndpointsAllowType,omitempty"`
	RulesToEndpointsDeny                []int64 `protobuf:"varint,21,rep,packed,name=RulesToEndpointsDeny,proto3" json:"RulesToEndpointsDeny,omitempty"`
	RulesToEndpointsDenyType            int64   `protobuf:"varint,22,opt,name=RulesToEndpointsDenyType,proto3" json:"RulesToEndpointsDenyType,omitempty"`
	AdvertiserTags                      []int64 `protobuf:"varint,23,rep,packed,name=AdvertiserTags,proto3" json:"AdvertiserTags,omitempty"`
	AdvertiserRulesToUsersAllow         []int64 `protobuf:"varint,24,rep,packed,name=AdvertiserRulesToUsersAllow,proto3" json:"AdvertiserRulesToUsersAllow,omitempty"`
	AdvertiserRulesToUsersAllowType     int64   `protobuf:"varint,25,opt,name=AdvertiserRulesToUsersAllowType,proto3" json:"AdvertiserRulesToUsersAllowType,omitempty"`
	AdvertiserRulesToUsersDeny          []int64 `protobuf:"varint,26,rep,packed,name=AdvertiserRulesToUsersDeny,proto3" json:"AdvertiserRulesToUsersDeny,omitempty"`
	AdvertiserRulesToUsersDenyType      int64   `protobuf:"varint,27,opt,name=AdvertiserRulesToUsersDenyType,proto3" json:"AdvertiserRulesToUsersDenyType,omitempty"`
	AdvertiserRulesToEndpointsAllow     []int64 `protobuf:"varint,28,rep,packed,name=AdvertiserRulesToEndpointsAllow,proto3" json:"AdvertiserRulesToEndpointsAllow,omitempty"`
	AdvertiserRulesToEndpointsAllowType int64   `protobuf:"varint,29,opt,name=AdvertiserRulesToEndpointsAllowType,proto3" json:"AdvertiserRulesToEndpointsAllowType,omitempty"`
	AdvertiserRulesToEndpointsDeny      []int64 `protobuf:"varint,30,rep,packed,name=AdvertiserRulesToEndpointsDeny,proto3" json:"AdvertiserRulesToEndpointsDeny,omitempty"`
	AdvertiserRulesToEndpointsDenyType  int64   `protobuf:"varint,31,opt,name=AdvertiserRulesToEndpointsDenyType,proto3" json:"AdvertiserRulesToEndpointsDenyType,omitempty"`
	CallNURL                            bool    `protobuf:"varint,32,opt,name=CallNURL,proto3" json:"CallNURL,omitempty"`
	SubscriberAgeMin                    int64   `protobuf:"varint,33,opt,name=SubscriberAgeMin,proto3" json:"SubscriberAgeMin,omitempty"`
	SubscriberAgeMax                    int64   `protobuf:"varint,34,opt,name=SubscriberAgeMax,proto3" json:"SubscriberAgeMax,omitempty"`
	RedirectType                        int64   `protobuf:"varint,35,opt,name=RedirectType,proto3" json:"RedirectType,omitempty"`
	GeoFilterType                       int64   `protobuf:"varint,36,opt,name=GeoFilterType,proto3" json:"GeoFilterType,omitempty"`
	GeoFilterMapString                  string  `protobuf:"bytes,37,opt,name=GeoFilterMapString,proto3" json:"GeoFilterMapString,omitempty"`
	NURLEvent                           string  `protobuf:"bytes,38,opt,name=NURLEvent,proto3" json:"NURLEvent,omitempty"`
	RequestFrequency                    int64   `protobuf:"varint,39,opt,name=RequestFrequency,proto3" json:"RequestFrequency,omitempty"`
	FastFilterSourceIDStr               string  `protobuf:"bytes,40,opt,name=FastFilterSourceIDStr,proto3" json:"FastFilterSourceIDStr,omitempty"`
	FastFilterSourceIDEncodedStr        string  `protobuf:"bytes,41,opt,name=FastFilterSourceIDEncodedStr,proto3" json:"FastFilterSourceIDEncodedStr,omitempty"`
	CheckIPMismatch                     bool    `protobuf:"varint,42,opt,name=CheckIPMismatch,proto3" json:"CheckIPMismatch,omitempty"`
	CheckUAMismatch                     bool    `protobuf:"varint,43,opt,name=CheckUAMismatch,proto3" json:"CheckUAMismatch,omitempty"`
	StopOnDClick                        bool    `protobuf:"varint,44,opt,name=StopOnDClick,proto3" json:"StopOnDClick,omitempty"`
	FilterPlatform                      int64   `protobuf:"varint,45,opt,name=FilterPlatform,proto3" json:"FilterPlatform,omitempty"`
	ExchangeRate                        float64 `protobuf:"fixed64,46,opt,name=ExchangeRate,proto3" json:"ExchangeRate,omitempty"`
	DatacenterID                        int64   `protobuf:"varint,47,opt,name=DatacenterID,proto3" json:"DatacenterID,omitempty"`
	FastFilterSourceIDFilterType        int64   `protobuf:"varint,48,opt,name=FastFilterSourceIDFilterType,proto3" json:"FastFilterSourceIDFilterType,omitempty"`
	DplID                               int64   `protobuf:"varint,49,opt,name=DplID,proto3" json:"DplID,omitempty"`
	RequestOpenRTBExtBidRequest         string  `protobuf:"bytes,50,opt,name=RequestOpenRTBExtBidRequest,proto3" json:"RequestOpenRTBExtBidRequest,omitempty"`
	RequestOpenRTBExtImp                string  `protobuf:"bytes,51,opt,name=RequestOpenRTBExtImp,proto3" json:"RequestOpenRTBExtImp,omitempty"`
	SendRefererHeader                   bool    `protobuf:"varint,52,opt,name=SendRefererHeader,proto3" json:"SendRefererHeader,omitempty"`
	CircuitBreakerLimit                 int64   `protobuf:"varint,53,opt,name=CircuitBreakerLimit,proto3" json:"CircuitBreakerLimit,omitempty"`
	RandomStarValues                    string  `protobuf:"bytes,54,opt,name=RandomStarValues,proto3" json:"RandomStarValues,omitempty"`
	OverrideAllReferrers                bool    `protobuf:"varint,55,opt,name=OverrideAllReferrers,proto3" json:"OverrideAllReferrers,omitempty"`
	OverrideReferrerListStr             string  `protobuf:"bytes,56,opt,name=OverrideReferrerListStr,proto3" json:"OverrideReferrerListStr,omitempty"`
	FFUserFilterType                    int64   `protobuf:"varint,57,opt,name=FFUserFilterType,proto3" json:"FFUserFilterType,omitempty"`
	FFEndpointFilterType                int64   `protobuf:"varint,58,opt,name=FFEndpointFilterType,proto3" json:"FFEndpointFilterType,omitempty"`
	FFAdvertiserToPublisherFilterType   int64   `protobuf:"varint,59,opt,name=FFAdvertiserToPublisherFilterType,proto3" json:"FFAdvertiserToPublisherFilterType,omitempty"`
	FFAdvertiserToEndpointFilterType    int64   `protobuf:"varint,60,opt,name=FFAdvertiserToEndpointFilterType,proto3" json:"FFAdvertiserToEndpointFilterType,omitempty"`
	EscapeOpenRTBNativeRequest          bool    `protobuf:"varint,61,opt,name=EscapeOpenRTBNativeRequest,proto3" json:"EscapeOpenRTBNativeRequest,omitempty"`
	RateLimitMax                        int64   `protobuf:"varint,62,opt,name=RateLimitMax,proto3" json:"RateLimitMax,omitempty"`
	Strictly                            bool    `protobuf:"varint,63,opt,name=Strictly,proto3" json:"Strictly,omitempty"`
	MaxSourcesCount                     int64   `protobuf:"varint,64,opt,name=MaxSourcesCount,proto3" json:"MaxSourcesCount,omitempty"`
	Prepay                              bool    `protobuf:"varint,65,opt,name=Prepay,proto3" json:"Prepay,omitempty"`
	ProcessDoubleEvent                  bool    `protobuf:"varint,66,opt,name=ProcessDoubleEvent,proto3" json:"ProcessDoubleEvent,omitempty"`
	TrafficQuality                      int64   `protobuf:"varint,67,opt,name=TrafficQuality,proto3" json:"TrafficQuality,omitempty"`
	ImpClickStrategy                    int64   `protobuf:"varint,68,opt,name=ImpClickStrategy,proto3" json:"ImpClickStrategy,omitempty"`
	OsDesktopJSONString                 string  `protobuf:"bytes,69,opt,name=OsDesktopJSONString,proto3" json:"OsDesktopJSONString,omitempty"`
	OsMobileJSONString                  string  `protobuf:"bytes,70,opt,name=OsMobileJSONString,proto3" json:"OsMobileJSONString,omitempty"`
	UaDesktopJSONString                 string  `protobuf:"bytes,71,opt,name=UaDesktopJSONString,proto3" json:"UaDesktopJSONString,omitempty"`
	UaMobileJSONString                  string  `protobuf:"bytes,72,opt,name=UaMobileJSONString,proto3" json:"UaMobileJSONString,omitempty"`
	DesktopOSFilterType                 int64   `protobuf:"varint,73,opt,name=DesktopOSFilterType,proto3" json:"DesktopOSFilterType,omitempty"`
	DesktopUAFilterType                 int64   `protobuf:"varint,74,opt,name=DesktopUAFilterType,proto3" json:"DesktopUAFilterType,omitempty"`
	MobileOSFilterType                  int64   `protobuf:"varint,75,opt,name=MobileOSFilterType,proto3" json:"MobileOSFilterType,omitempty"`
	MobileUAFilterType                  int64   `protobuf:"varint,76,opt,name=MobileUAFilterType,proto3" json:"MobileUAFilterType,omitempty"`
	CallWinURL                          bool    `protobuf:"varint,77,opt,name=CallWinURL,proto3" json:"CallWinURL,omitempty"`
}

func (x *DSP) Reset() {
	*x = DSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSP) ProtoMessage() {}

func (x *DSP) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSP.ProtoReflect.Descriptor instead.
func (*DSP) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

func (x *DSP) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DSP) GetNetworkID() int64 {
	if x != nil {
		return x.NetworkID
	}
	return 0
}

func (x *DSP) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *DSP) GetPaymentTarget() int64 {
	if x != nil {
		return x.PaymentTarget
	}
	return 0
}

func (x *DSP) GetPaymentType() int64 {
	if x != nil {
		return x.PaymentType
	}
	return 0
}

func (x *DSP) GetRate() int64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *DSP) GetMethod() int64 {
	if x != nil {
		return x.Method
	}
	return 0
}

func (x *DSP) GetRequestType() int64 {
	if x != nil {
		return x.RequestType
	}
	return 0
}

func (x *DSP) GetResponseType() int64 {
	if x != nil {
		return x.ResponseType
	}
	return 0
}

func (x *DSP) GetAdvertiserID() int64 {
	if x != nil {
		return x.AdvertiserID
	}
	return 0
}

func (x *DSP) GetCustomResponseSettings() string {
	if x != nil {
		return x.CustomResponseSettings
	}
	return ""
}

func (x *DSP) GetTrafficType() int64 {
	if x != nil {
		return x.TrafficType
	}
	return 0
}

func (x *DSP) GetAdvertiserRate() int64 {
	if x != nil {
		return x.AdvertiserRate
	}
	return 0
}

func (x *DSP) GetTags() []int64 {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DSP) GetRulesToUsersAllow() []int64 {
	if x != nil {
		return x.RulesToUsersAllow
	}
	return nil
}

func (x *DSP) GetRulesToUsersAllowType() int64 {
	if x != nil {
		return x.RulesToUsersAllowType
	}
	return 0
}

func (x *DSP) GetRulesToUsersDeny() []int64 {
	if x != nil {
		return x.RulesToUsersDeny
	}
	return nil
}

func (x *DSP) GetRulesToUsersDenyType() int64 {
	if x != nil {
		return x.RulesToUsersDenyType
	}
	return 0
}

func (x *DSP) GetRulesToEndpointsAllow() []int64 {
	if x != nil {
		return x.RulesToEndpointsAllow
	}
	return nil
}

func (x *DSP) GetRulesToEndpointsAllowType() int64 {
	if x != nil {
		return x.RulesToEndpointsAllowType
	}
	return 0
}

func (x *DSP) GetRulesToEndpointsDeny() []int64 {
	if x != nil {
		return x.RulesToEndpointsDeny
	}
	return nil
}

func (x *DSP) GetRulesToEndpointsDenyType() int64 {
	if x != nil {
		return x.RulesToEndpointsDenyType
	}
	return 0
}

func (x *DSP) GetAdvertiserTags() []int64 {
	if x != nil {
		return x.AdvertiserTags
	}
	return nil
}

func (x *DSP) GetAdvertiserRulesToUsersAllow() []int64 {
	if x != nil {
		return x.AdvertiserRulesToUsersAllow
	}
	return nil
}

func (x *DSP) GetAdvertiserRulesToUsersAllowType() int64 {
	if x != nil {
		return x.AdvertiserRulesToUsersAllowType
	}
	return 0
}

func (x *DSP) GetAdvertiserRulesToUsersDeny() []int64 {
	if x != nil {
		return x.AdvertiserRulesToUsersDeny
	}
	return nil
}

func (x *DSP) GetAdvertiserRulesToUsersDenyType() int64 {
	if x != nil {
		return x.AdvertiserRulesToUsersDenyType
	}
	return 0
}

func (x *DSP) GetAdvertiserRulesToEndpointsAllow() []int64 {
	if x != nil {
		return x.AdvertiserRulesToEndpointsAllow
	}
	return nil
}

func (x *DSP) GetAdvertiserRulesToEndpointsAllowType() int64 {
	if x != nil {
		return x.AdvertiserRulesToEndpointsAllowType
	}
	return 0
}

func (x *DSP) GetAdvertiserRulesToEndpointsDeny() []int64 {
	if x != nil {
		return x.AdvertiserRulesToEndpointsDeny
	}
	return nil
}

func (x *DSP) GetAdvertiserRulesToEndpointsDenyType() int64 {
	if x != nil {
		return x.AdvertiserRulesToEndpointsDenyType
	}
	return 0
}

func (x *DSP) GetCallNURL() bool {
	if x != nil {
		return x.CallNURL
	}
	return false
}

func (x *DSP) GetSubscriberAgeMin() int64 {
	if x != nil {
		return x.SubscriberAgeMin
	}
	return 0
}

func (x *DSP) GetSubscriberAgeMax() int64 {
	if x != nil {
		return x.SubscriberAgeMax
	}
	return 0
}

func (x *DSP) GetRedirectType() int64 {
	if x != nil {
		return x.RedirectType
	}
	return 0
}

func (x *DSP) GetGeoFilterType() int64 {
	if x != nil {
		return x.GeoFilterType
	}
	return 0
}

func (x *DSP) GetGeoFilterMapString() string {
	if x != nil {
		return x.GeoFilterMapString
	}
	return ""
}

func (x *DSP) GetNURLEvent() string {
	if x != nil {
		return x.NURLEvent
	}
	return ""
}

func (x *DSP) GetRequestFrequency() int64 {
	if x != nil {
		return x.RequestFrequency
	}
	return 0
}

func (x *DSP) GetFastFilterSourceIDStr() string {
	if x != nil {
		return x.FastFilterSourceIDStr
	}
	return ""
}

func (x *DSP) GetFastFilterSourceIDEncodedStr() string {
	if x != nil {
		return x.FastFilterSourceIDEncodedStr
	}
	return ""
}

func (x *DSP) GetCheckIPMismatch() bool {
	if x != nil {
		return x.CheckIPMismatch
	}
	return false
}

func (x *DSP) GetCheckUAMismatch() bool {
	if x != nil {
		return x.CheckUAMismatch
	}
	return false
}

func (x *DSP) GetStopOnDClick() bool {
	if x != nil {
		return x.StopOnDClick
	}
	return false
}

func (x *DSP) GetFilterPlatform() int64 {
	if x != nil {
		return x.FilterPlatform
	}
	return 0
}

func (x *DSP) GetExchangeRate() float64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *DSP) GetDatacenterID() int64 {
	if x != nil {
		return x.DatacenterID
	}
	return 0
}

func (x *DSP) GetFastFilterSourceIDFilterType() int64 {
	if x != nil {
		return x.FastFilterSourceIDFilterType
	}
	return 0
}

func (x *DSP) GetDplID() int64 {
	if x != nil {
		return x.DplID
	}
	return 0
}

func (x *DSP) GetRequestOpenRTBExtBidRequest() string {
	if x != nil {
		return x.RequestOpenRTBExtBidRequest
	}
	return ""
}

func (x *DSP) GetRequestOpenRTBExtImp() string {
	if x != nil {
		return x.RequestOpenRTBExtImp
	}
	return ""
}

func (x *DSP) GetSendRefererHeader() bool {
	if x != nil {
		return x.SendRefererHeader
	}
	return false
}

func (x *DSP) GetCircuitBreakerLimit() int64 {
	if x != nil {
		return x.CircuitBreakerLimit
	}
	return 0
}

func (x *DSP) GetRandomStarValues() string {
	if x != nil {
		return x.RandomStarValues
	}
	return ""
}

func (x *DSP) GetOverrideAllReferrers() bool {
	if x != nil {
		return x.OverrideAllReferrers
	}
	return false
}

func (x *DSP) GetOverrideReferrerListStr() string {
	if x != nil {
		return x.OverrideReferrerListStr
	}
	return ""
}

func (x *DSP) GetFFUserFilterType() int64 {
	if x != nil {
		return x.FFUserFilterType
	}
	return 0
}

func (x *DSP) GetFFEndpointFilterType() int64 {
	if x != nil {
		return x.FFEndpointFilterType
	}
	return 0
}

func (x *DSP) GetFFAdvertiserToPublisherFilterType() int64 {
	if x != nil {
		return x.FFAdvertiserToPublisherFilterType
	}
	return 0
}

func (x *DSP) GetFFAdvertiserToEndpointFilterType() int64 {
	if x != nil {
		return x.FFAdvertiserToEndpointFilterType
	}
	return 0
}

func (x *DSP) GetEscapeOpenRTBNativeRequest() bool {
	if x != nil {
		return x.EscapeOpenRTBNativeRequest
	}
	return false
}

func (x *DSP) GetRateLimitMax() int64 {
	if x != nil {
		return x.RateLimitMax
	}
	return 0
}

func (x *DSP) GetStrictly() bool {
	if x != nil {
		return x.Strictly
	}
	return false
}

func (x *DSP) GetMaxSourcesCount() int64 {
	if x != nil {
		return x.MaxSourcesCount
	}
	return 0
}

func (x *DSP) GetPrepay() bool {
	if x != nil {
		return x.Prepay
	}
	return false
}

func (x *DSP) GetProcessDoubleEvent() bool {
	if x != nil {
		return x.ProcessDoubleEvent
	}
	return false
}

func (x *DSP) GetTrafficQuality() int64 {
	if x != nil {
		return x.TrafficQuality
	}
	return 0
}

func (x *DSP) GetImpClickStrategy() int64 {
	if x != nil {
		return x.ImpClickStrategy
	}
	return 0
}

func (x *DSP) GetOsDesktopJSONString() string {
	if x != nil {
		return x.OsDesktopJSONString
	}
	return ""
}

func (x *DSP) GetOsMobileJSONString() string {
	if x != nil {
		return x.OsMobileJSONString
	}
	return ""
}

func (x *DSP) GetUaDesktopJSONString() string {
	if x != nil {
		return x.UaDesktopJSONString
	}
	return ""
}

func (x *DSP) GetUaMobileJSONString() string {
	if x != nil {
		return x.UaMobileJSONString
	}
	return ""
}

func (x *DSP) GetDesktopOSFilterType() int64 {
	if x != nil {
		return x.DesktopOSFilterType
	}
	return 0
}

func (x *DSP) GetDesktopUAFilterType() int64 {
	if x != nil {
		return x.DesktopUAFilterType
	}
	return 0
}

func (x *DSP) GetMobileOSFilterType() int64 {
	if x != nil {
		return x.MobileOSFilterType
	}
	return 0
}

func (x *DSP) GetMobileUAFilterType() int64 {
	if x != nil {
		return x.MobileUAFilterType
	}
	return 0
}

func (x *DSP) GetCallWinURL() bool {
	if x != nil {
		return x.CallWinURL
	}
	return false
}

type DPL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	D  string `protobuf:"bytes,2,opt,name=D,proto3" json:"D,omitempty"`
}

func (x *DPL) Reset() {
	*x = DPL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPL) ProtoMessage() {}

func (x *DPL) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPL.ProtoReflect.Descriptor instead.
func (*DPL) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *DPL) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DPL) GetD() string {
	if x != nil {
		return x.D
	}
	return ""
}

type DefaultDPL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID int64 `protobuf:"varint,1,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	DPL0      int64 `protobuf:"varint,2,opt,name=DPL0,proto3" json:"DPL0,omitempty"`
	DPL1      int64 `protobuf:"varint,3,opt,name=DPL1,proto3" json:"DPL1,omitempty"`
	DPL2      int64 `protobuf:"varint,4,opt,name=DPL2,proto3" json:"DPL2,omitempty"`
	DPL3      int64 `protobuf:"varint,5,opt,name=DPL3,proto3" json:"DPL3,omitempty"`
	DPL4      int64 `protobuf:"varint,6,opt,name=DPL4,proto3" json:"DPL4,omitempty"`
	DPL5      int64 `protobuf:"varint,7,opt,name=DPL5,proto3" json:"DPL5,omitempty"`
	DPL6      int64 `protobuf:"varint,8,opt,name=DPL6,proto3" json:"DPL6,omitempty"`
	DPL7      int64 `protobuf:"varint,9,opt,name=DPL7,proto3" json:"DPL7,omitempty"`
	DPL8      int64 `protobuf:"varint,10,opt,name=DPL8,proto3" json:"DPL8,omitempty"`
	DPL9      int64 `protobuf:"varint,11,opt,name=DPL9,proto3" json:"DPL9,omitempty"`
}

func (x *DefaultDPL) Reset() {
	*x = DefaultDPL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultDPL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultDPL) ProtoMessage() {}

func (x *DefaultDPL) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultDPL.ProtoReflect.Descriptor instead.
func (*DefaultDPL) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15}
}

func (x *DefaultDPL) GetNetworkID() int64 {
	if x != nil {
		return x.NetworkID
	}
	return 0
}

func (x *DefaultDPL) GetDPL0() int64 {
	if x != nil {
		return x.DPL0
	}
	return 0
}

func (x *DefaultDPL) GetDPL1() int64 {
	if x != nil {
		return x.DPL1
	}
	return 0
}

func (x *DefaultDPL) GetDPL2() int64 {
	if x != nil {
		return x.DPL2
	}
	return 0
}

func (x *DefaultDPL) GetDPL3() int64 {
	if x != nil {
		return x.DPL3
	}
	return 0
}

func (x *DefaultDPL) GetDPL4() int64 {
	if x != nil {
		return x.DPL4
	}
	return 0
}

func (x *DefaultDPL) GetDPL5() int64 {
	if x != nil {
		return x.DPL5
	}
	return 0
}

func (x *DefaultDPL) GetDPL6() int64 {
	if x != nil {
		return x.DPL6
	}
	return 0
}

func (x *DefaultDPL) GetDPL7() int64 {
	if x != nil {
		return x.DPL7
	}
	return 0
}

func (x *DefaultDPL) GetDPL8() int64 {
	if x != nil {
		return x.DPL8
	}
	return 0
}

func (x *DefaultDPL) GetDPL9() int64 {
	if x != nil {
		return x.DPL9
	}
	return 0
}

type Campaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                                  int64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID                              int64   `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	NetworkID                           int64   `protobuf:"varint,3,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	Cap                                 int64   `protobuf:"varint,4,opt,name=Cap,proto3" json:"Cap,omitempty"`
	GeoJSONString                       string  `protobuf:"bytes,5,opt,name=GeoJSONString,proto3" json:"GeoJSONString,omitempty"`
	GeoFilterType                       int64   `protobuf:"varint,6,opt,name=GeoFilterType,proto3" json:"GeoFilterType,omitempty"`
	SpendStrategyType                   int64   `protobuf:"varint,7,opt,name=SpendStrategyType,proto3" json:"SpendStrategyType,omitempty"`
	DailyBudget                         int64   `protobuf:"varint,8,opt,name=DailyBudget,proto3" json:"DailyBudget,omitempty"`
	TotalBudget                         int64   `protobuf:"varint,9,opt,name=TotalBudget,proto3" json:"TotalBudget,omitempty"`
	FilterISP                           int64   `protobuf:"varint,10,opt,name=FilterISP,proto3" json:"FilterISP,omitempty"`
	FilterISPType                       int64   `protobuf:"varint,11,opt,name=FilterISPType,proto3" json:"FilterISPType,omitempty"`
	Timezone                            string  `protobuf:"bytes,12,opt,name=Timezone,proto3" json:"Timezone,omitempty"`
	FilterPlatforms                     int64   `protobuf:"varint,13,opt,name=FilterPlatforms,proto3" json:"FilterPlatforms,omitempty"`
	OsDesktopJSONString                 string  `protobuf:"bytes,14,opt,name=OsDesktopJSONString,proto3" json:"OsDesktopJSONString,omitempty"`
	OsMobileJSONString                  string  `protobuf:"bytes,15,opt,name=OsMobileJSONString,proto3" json:"OsMobileJSONString,omitempty"`
	UaDesktopJSONString                 string  `protobuf:"bytes,16,opt,name=UaDesktopJSONString,proto3" json:"UaDesktopJSONString,omitempty"`
	UaMobileJSONString                  string  `protobuf:"bytes,17,opt,name=UaMobileJSONString,proto3" json:"UaMobileJSONString,omitempty"`
	OptListTypeIP                       int64   `protobuf:"varint,18,opt,name=OptListTypeIP,proto3" json:"OptListTypeIP,omitempty"`
	OptListTypeSID                      int64   `protobuf:"varint,19,opt,name=OptListTypeSID,proto3" json:"OptListTypeSID,omitempty"`
	OptListTypeExtraIP                  int64   `protobuf:"varint,20,opt,name=OptListTypeExtraIP,proto3" json:"OptListTypeExtraIP,omitempty"`
	OptListTypeExtraSID                 int64   `protobuf:"varint,21,opt,name=OptListTypeExtraSID,proto3" json:"OptListTypeExtraSID,omitempty"`
	OptListTypeExtraForeignSID          int64   `protobuf:"varint,22,opt,name=OptListTypeExtraForeignSID,proto3" json:"OptListTypeExtraForeignSID,omitempty"`
	OptListTypeISP                      int64   `protobuf:"varint,23,opt,name=OptListTypeISP,proto3" json:"OptListTypeISP,omitempty"`
	OptListTypeExtraISP                 int64   `protobuf:"varint,24,opt,name=OptListTypeExtraISP,proto3" json:"OptListTypeExtraISP,omitempty"`
	DesktopOSFilterType                 int64   `protobuf:"varint,25,opt,name=DesktopOSFilterType,proto3" json:"DesktopOSFilterType,omitempty"`
	DesktopUAFilterType                 int64   `protobuf:"varint,26,opt,name=DesktopUAFilterType,proto3" json:"DesktopUAFilterType,omitempty"`
	MobileOSFilterType                  int64   `protobuf:"varint,27,opt,name=MobileOSFilterType,proto3" json:"MobileOSFilterType,omitempty"`
	MobileUAFilterType                  int64   `protobuf:"varint,28,opt,name=MobileUAFilterType,proto3" json:"MobileUAFilterType,omitempty"`
	AdvertiserRate                      int64   `protobuf:"varint,29,opt,name=AdvertiserRate,proto3" json:"AdvertiserRate,omitempty"`
	CampaignRate                        int64   `protobuf:"varint,30,opt,name=CampaignRate,proto3" json:"CampaignRate,omitempty"`
	ShaveClicks                         int64   `protobuf:"varint,31,opt,name=ShaveClicks,proto3" json:"ShaveClicks,omitempty"`
	MinBalance                          int64   `protobuf:"varint,32,opt,name=MinBalance,proto3" json:"MinBalance,omitempty"`
	FreezeRules                         string  `protobuf:"bytes,33,opt,name=FreezeRules,proto3" json:"FreezeRules,omitempty"`
	RejectIPMismatch                    bool    `protobuf:"varint,34,opt,name=RejectIPMismatch,proto3" json:"RejectIPMismatch,omitempty"`
	RejectUAMismatch                    bool    `protobuf:"varint,35,opt,name=RejectUAMismatch,proto3" json:"RejectUAMismatch,omitempty"`
	RejectCountryMismatch               bool    `protobuf:"varint,36,opt,name=RejectCountryMismatch,proto3" json:"RejectCountryMismatch,omitempty"`
	Tags                                []int64 `protobuf:"varint,37,rep,packed,name=Tags,proto3" json:"Tags,omitempty"`
	RulesToUsersAllow                   []int64 `protobuf:"varint,38,rep,packed,name=RulesToUsersAllow,proto3" json:"RulesToUsersAllow,omitempty"`
	RulesToUsersAllowType               int64   `protobuf:"varint,39,opt,name=RulesToUsersAllowType,proto3" json:"RulesToUsersAllowType,omitempty"`
	RulesToUsersDeny                    []int64 `protobuf:"varint,40,rep,packed,name=RulesToUsersDeny,proto3" json:"RulesToUsersDeny,omitempty"`
	RulesToUsersDenyType                int64   `protobuf:"varint,41,opt,name=RulesToUsersDenyType,proto3" json:"RulesToUsersDenyType,omitempty"`
	RulesToEndpointsAllow               []int64 `protobuf:"varint,42,rep,packed,name=RulesToEndpointsAllow,proto3" json:"RulesToEndpointsAllow,omitempty"`
	RulesToEndpointsAllowType           int64   `protobuf:"varint,43,opt,name=RulesToEndpointsAllowType,proto3" json:"RulesToEndpointsAllowType,omitempty"`
	RulesToEndpointsDeny                []int64 `protobuf:"varint,44,rep,packed,name=RulesToEndpointsDeny,proto3" json:"RulesToEndpointsDeny,omitempty"`
	RulesToEndpointsDenyType            int64   `protobuf:"varint,45,opt,name=RulesToEndpointsDenyType,proto3" json:"RulesToEndpointsDenyType,omitempty"`
	AdvertiserTags                      []int64 `protobuf:"varint,46,rep,packed,name=AdvertiserTags,proto3" json:"AdvertiserTags,omitempty"`
	AdvertiserRulesToUsersAllow         []int64 `protobuf:"varint,47,rep,packed,name=AdvertiserRulesToUsersAllow,proto3" json:"AdvertiserRulesToUsersAllow,omitempty"`
	AdvertiserRulesToUsersAllowType     int64   `protobuf:"varint,48,opt,name=AdvertiserRulesToUsersAllowType,proto3" json:"AdvertiserRulesToUsersAllowType,omitempty"`
	AdvertiserRulesToUsersDeny          []int64 `protobuf:"varint,49,rep,packed,name=AdvertiserRulesToUsersDeny,proto3" json:"AdvertiserRulesToUsersDeny,omitempty"`
	AdvertiserRulesToUsersDenyType      int64   `protobuf:"varint,50,opt,name=AdvertiserRulesToUsersDenyType,proto3" json:"AdvertiserRulesToUsersDenyType,omitempty"`
	AdvertiserRulesToEndpointsAllow     []int64 `protobuf:"varint,51,rep,packed,name=AdvertiserRulesToEndpointsAllow,proto3" json:"AdvertiserRulesToEndpointsAllow,omitempty"`
	AdvertiserRulesToEndpointsAllowType int64   `protobuf:"varint,52,opt,name=AdvertiserRulesToEndpointsAllowType,proto3" json:"AdvertiserRulesToEndpointsAllowType,omitempty"`
	AdvertiserRulesToEndpointsDeny      []int64 `protobuf:"varint,53,rep,packed,name=AdvertiserRulesToEndpointsDeny,proto3" json:"AdvertiserRulesToEndpointsDeny,omitempty"`
	AdvertiserRulesToEndpointsDenyType  int64   `protobuf:"varint,54,opt,name=AdvertiserRulesToEndpointsDenyType,proto3" json:"AdvertiserRulesToEndpointsDenyType,omitempty"`
	HasOptlistIP                        bool    `protobuf:"varint,55,opt,name=HasOptlistIP,proto3" json:"HasOptlistIP,omitempty"`
	HasOptlistExtIP                     bool    `protobuf:"varint,56,opt,name=HasOptlistExtIP,proto3" json:"HasOptlistExtIP,omitempty"`
	HasOptlistSID                       bool    `protobuf:"varint,57,opt,name=HasOptlistSID,proto3" json:"HasOptlistSID,omitempty"`
	HasOptlistExtSID                    bool    `protobuf:"varint,58,opt,name=HasOptlistExtSID,proto3" json:"HasOptlistExtSID,omitempty"`
	HasOptlistISP                       bool    `protobuf:"varint,59,opt,name=HasOptlistISP,proto3" json:"HasOptlistISP,omitempty"`
	HasOptlistExtISP                    bool    `protobuf:"varint,60,opt,name=HasOptlistExtISP,proto3" json:"HasOptlistExtISP,omitempty"`
	HasOptlistExtForeignSID             bool    `protobuf:"varint,61,opt,name=HasOptlistExtForeignSID,proto3" json:"HasOptlistExtForeignSID,omitempty"`
	CreativeID                          int64   `protobuf:"varint,62,opt,name=CreativeID,proto3" json:"CreativeID,omitempty"`
	CreativeURL                         string  `protobuf:"bytes,63,opt,name=CreativeURL,proto3" json:"CreativeURL,omitempty"`
	CreativePrice                       int64   `protobuf:"varint,64,opt,name=CreativePrice,proto3" json:"CreativePrice,omitempty"`
	CreativeType                        int64   `protobuf:"varint,65,opt,name=CreativeType,proto3" json:"CreativeType,omitempty"`
	CreativeUserAgeMin                  int64   `protobuf:"varint,66,opt,name=CreativeUserAgeMin,proto3" json:"CreativeUserAgeMin,omitempty"`
	CreativeUserAgeMax                  int64   `protobuf:"varint,67,opt,name=CreativeUserAgeMax,proto3" json:"CreativeUserAgeMax,omitempty"`
	CreativeUserSex                     int64   `protobuf:"varint,68,opt,name=CreativeUserSex,proto3" json:"CreativeUserSex,omitempty"`
	CreativeTitle                       string  `protobuf:"bytes,69,opt,name=CreativeTitle,proto3" json:"CreativeTitle,omitempty"`
	CreativeDescription                 string  `protobuf:"bytes,70,opt,name=CreativeDescription,proto3" json:"CreativeDescription,omitempty"`
	CreativeImage                       string  `protobuf:"bytes,71,opt,name=CreativeImage,proto3" json:"CreativeImage,omitempty"`
	CreativeIcon                        string  `protobuf:"bytes,72,opt,name=CreativeIcon,proto3" json:"CreativeIcon,omitempty"`
	CreativePaymentType                 int64   `protobuf:"varint,73,opt,name=CreativePaymentType,proto3" json:"CreativePaymentType,omitempty"`
	CreativePaymentTarget               int64   `protobuf:"varint,74,opt,name=CreativePaymentTarget,proto3" json:"CreativePaymentTarget,omitempty"`
	TargetSubscriptionAgeFrom           int64   `protobuf:"varint,75,opt,name=TargetSubscriptionAgeFrom,proto3" json:"TargetSubscriptionAgeFrom,omitempty"`
	TargetSubscriptionAgeTo             int64   `protobuf:"varint,76,opt,name=TargetSubscriptionAgeTo,proto3" json:"TargetSubscriptionAgeTo,omitempty"`
	FastFilterSourceIDStr               string  `protobuf:"bytes,77,opt,name=FastFilterSourceIDStr,proto3" json:"FastFilterSourceIDStr,omitempty"`
	FastFilterSourceIDFilterType        int64   `protobuf:"varint,78,opt,name=FastFilterSourceIDFilterType,proto3" json:"FastFilterSourceIDFilterType,omitempty"`
	SaveForSST                          int64   `protobuf:"varint,79,opt,name=SaveForSST,proto3" json:"SaveForSST,omitempty"`
	FFCampaignToPublisherFilterType     int64   `protobuf:"varint,80,opt,name=FFCampaignToPublisherFilterType,proto3" json:"FFCampaignToPublisherFilterType,omitempty"`
	FFCampaignToEndpointFilterType      int64   `protobuf:"varint,81,opt,name=FFCampaignToEndpointFilterType,proto3" json:"FFCampaignToEndpointFilterType,omitempty"`
	FFAdvertiserToPublisherFilterType   int64   `protobuf:"varint,82,opt,name=FFAdvertiserToPublisherFilterType,proto3" json:"FFAdvertiserToPublisherFilterType,omitempty"`
	FFAdvertiserToEndpointFilterType    int64   `protobuf:"varint,83,opt,name=FFAdvertiserToEndpointFilterType,proto3" json:"FFAdvertiserToEndpointFilterType,omitempty"`
	Strictly                            bool    `protobuf:"varint,84,opt,name=Strictly,proto3" json:"Strictly,omitempty"`
	AdvertiserCashback                  float64 `protobuf:"fixed64,85,opt,name=AdvertiserCashback,proto3" json:"AdvertiserCashback,omitempty"`
	ProcessDoubleEvent                  bool    `protobuf:"varint,86,opt,name=ProcessDoubleEvent,proto3" json:"ProcessDoubleEvent,omitempty"`
	TrafficQuality                      int64   `protobuf:"varint,87,opt,name=TrafficQuality,proto3" json:"TrafficQuality,omitempty"`
	ImpClickStrategy                    int64   `protobuf:"varint,88,opt,name=ImpClickStrategy,proto3" json:"ImpClickStrategy,omitempty"`
	LangTargetJSONString                string  `protobuf:"bytes,89,opt,name=LangTargetJSONString,proto3" json:"LangTargetJSONString,omitempty"`
	LangTargetFilterType                int64   `protobuf:"varint,90,opt,name=LangTargetFilterType,proto3" json:"LangTargetFilterType,omitempty"`
}

func (x *Campaign) Reset() {
	*x = Campaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Campaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Campaign) ProtoMessage() {}

func (x *Campaign) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Campaign.ProtoReflect.Descriptor instead.
func (*Campaign) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{16}
}

func (x *Campaign) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Campaign) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Campaign) GetNetworkID() int64 {
	if x != nil {
		return x.NetworkID
	}
	return 0
}

func (x *Campaign) GetCap() int64 {
	if x != nil {
		return x.Cap
	}
	return 0
}

func (x *Campaign) GetGeoJSONString() string {
	if x != nil {
		return x.GeoJSONString
	}
	return ""
}

func (x *Campaign) GetGeoFilterType() int64 {
	if x != nil {
		return x.GeoFilterType
	}
	return 0
}

func (x *Campaign) GetSpendStrategyType() int64 {
	if x != nil {
		return x.SpendStrategyType
	}
	return 0
}

func (x *Campaign) GetDailyBudget() int64 {
	if x != nil {
		return x.DailyBudget
	}
	return 0
}

func (x *Campaign) GetTotalBudget() int64 {
	if x != nil {
		return x.TotalBudget
	}
	return 0
}

func (x *Campaign) GetFilterISP() int64 {
	if x != nil {
		return x.FilterISP
	}
	return 0
}

func (x *Campaign) GetFilterISPType() int64 {
	if x != nil {
		return x.FilterISPType
	}
	return 0
}

func (x *Campaign) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Campaign) GetFilterPlatforms() int64 {
	if x != nil {
		return x.FilterPlatforms
	}
	return 0
}

func (x *Campaign) GetOsDesktopJSONString() string {
	if x != nil {
		return x.OsDesktopJSONString
	}
	return ""
}

func (x *Campaign) GetOsMobileJSONString() string {
	if x != nil {
		return x.OsMobileJSONString
	}
	return ""
}

func (x *Campaign) GetUaDesktopJSONString() string {
	if x != nil {
		return x.UaDesktopJSONString
	}
	return ""
}

func (x *Campaign) GetUaMobileJSONString() string {
	if x != nil {
		return x.UaMobileJSONString
	}
	return ""
}

func (x *Campaign) GetOptListTypeIP() int64 {
	if x != nil {
		return x.OptListTypeIP
	}
	return 0
}

func (x *Campaign) GetOptListTypeSID() int64 {
	if x != nil {
		return x.OptListTypeSID
	}
	return 0
}

func (x *Campaign) GetOptListTypeExtraIP() int64 {
	if x != nil {
		return x.OptListTypeExtraIP
	}
	return 0
}

func (x *Campaign) GetOptListTypeExtraSID() int64 {
	if x != nil {
		return x.OptListTypeExtraSID
	}
	return 0
}

func (x *Campaign) GetOptListTypeExtraForeignSID() int64 {
	if x != nil {
		return x.OptListTypeExtraForeignSID
	}
	return 0
}

func (x *Campaign) GetOptListTypeISP() int64 {
	if x != nil {
		return x.OptListTypeISP
	}
	return 0
}

func (x *Campaign) GetOptListTypeExtraISP() int64 {
	if x != nil {
		return x.OptListTypeExtraISP
	}
	return 0
}

func (x *Campaign) GetDesktopOSFilterType() int64 {
	if x != nil {
		return x.DesktopOSFilterType
	}
	return 0
}

func (x *Campaign) GetDesktopUAFilterType() int64 {
	if x != nil {
		return x.DesktopUAFilterType
	}
	return 0
}

func (x *Campaign) GetMobileOSFilterType() int64 {
	if x != nil {
		return x.MobileOSFilterType
	}
	return 0
}

func (x *Campaign) GetMobileUAFilterType() int64 {
	if x != nil {
		return x.MobileUAFilterType
	}
	return 0
}

func (x *Campaign) GetAdvertiserRate() int64 {
	if x != nil {
		return x.AdvertiserRate
	}
	return 0
}

func (x *Campaign) GetCampaignRate() int64 {
	if x != nil {
		return x.CampaignRate
	}
	return 0
}

func (x *Campaign) GetShaveClicks() int64 {
	if x != nil {
		return x.ShaveClicks
	}
	return 0
}

func (x *Campaign) GetMinBalance() int64 {
	if x != nil {
		return x.MinBalance
	}
	return 0
}

func (x *Campaign) GetFreezeRules() string {
	if x != nil {
		return x.FreezeRules
	}
	return ""
}

func (x *Campaign) GetRejectIPMismatch() bool {
	if x != nil {
		return x.RejectIPMismatch
	}
	return false
}

func (x *Campaign) GetRejectUAMismatch() bool {
	if x != nil {
		return x.RejectUAMismatch
	}
	return false
}

func (x *Campaign) GetRejectCountryMismatch() bool {
	if x != nil {
		return x.RejectCountryMismatch
	}
	return false
}

func (x *Campaign) GetTags() []int64 {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Campaign) GetRulesToUsersAllow() []int64 {
	if x != nil {
		return x.RulesToUsersAllow
	}
	return nil
}

func (x *Campaign) GetRulesToUsersAllowType() int64 {
	if x != nil {
		return x.RulesToUsersAllowType
	}
	return 0
}

func (x *Campaign) GetRulesToUsersDeny() []int64 {
	if x != nil {
		return x.RulesToUsersDeny
	}
	return nil
}

func (x *Campaign) GetRulesToUsersDenyType() int64 {
	if x != nil {
		return x.RulesToUsersDenyType
	}
	return 0
}

func (x *Campaign) GetRulesToEndpointsAllow() []int64 {
	if x != nil {
		return x.RulesToEndpointsAllow
	}
	return nil
}

func (x *Campaign) GetRulesToEndpointsAllowType() int64 {
	if x != nil {
		return x.RulesToEndpointsAllowType
	}
	return 0
}

func (x *Campaign) GetRulesToEndpointsDeny() []int64 {
	if x != nil {
		return x.RulesToEndpointsDeny
	}
	return nil
}

func (x *Campaign) GetRulesToEndpointsDenyType() int64 {
	if x != nil {
		return x.RulesToEndpointsDenyType
	}
	return 0
}

func (x *Campaign) GetAdvertiserTags() []int64 {
	if x != nil {
		return x.AdvertiserTags
	}
	return nil
}

func (x *Campaign) GetAdvertiserRulesToUsersAllow() []int64 {
	if x != nil {
		return x.AdvertiserRulesToUsersAllow
	}
	return nil
}

func (x *Campaign) GetAdvertiserRulesToUsersAllowType() int64 {
	if x != nil {
		return x.AdvertiserRulesToUsersAllowType
	}
	return 0
}

func (x *Campaign) GetAdvertiserRulesToUsersDeny() []int64 {
	if x != nil {
		return x.AdvertiserRulesToUsersDeny
	}
	return nil
}

func (x *Campaign) GetAdvertiserRulesToUsersDenyType() int64 {
	if x != nil {
		return x.AdvertiserRulesToUsersDenyType
	}
	return 0
}

func (x *Campaign) GetAdvertiserRulesToEndpointsAllow() []int64 {
	if x != nil {
		return x.AdvertiserRulesToEndpointsAllow
	}
	return nil
}

func (x *Campaign) GetAdvertiserRulesToEndpointsAllowType() int64 {
	if x != nil {
		return x.AdvertiserRulesToEndpointsAllowType
	}
	return 0
}

func (x *Campaign) GetAdvertiserRulesToEndpointsDeny() []int64 {
	if x != nil {
		return x.AdvertiserRulesToEndpointsDeny
	}
	return nil
}

func (x *Campaign) GetAdvertiserRulesToEndpointsDenyType() int64 {
	if x != nil {
		return x.AdvertiserRulesToEndpointsDenyType
	}
	return 0
}

func (x *Campaign) GetHasOptlistIP() bool {
	if x != nil {
		return x.HasOptlistIP
	}
	return false
}

func (x *Campaign) GetHasOptlistExtIP() bool {
	if x != nil {
		return x.HasOptlistExtIP
	}
	return false
}

func (x *Campaign) GetHasOptlistSID() bool {
	if x != nil {
		return x.HasOptlistSID
	}
	return false
}

func (x *Campaign) GetHasOptlistExtSID() bool {
	if x != nil {
		return x.HasOptlistExtSID
	}
	return false
}

func (x *Campaign) GetHasOptlistISP() bool {
	if x != nil {
		return x.HasOptlistISP
	}
	return false
}

func (x *Campaign) GetHasOptlistExtISP() bool {
	if x != nil {
		return x.HasOptlistExtISP
	}
	return false
}

func (x *Campaign) GetHasOptlistExtForeignSID() bool {
	if x != nil {
		return x.HasOptlistExtForeignSID
	}
	return false
}

func (x *Campaign) GetCreativeID() int64 {
	if x != nil {
		return x.CreativeID
	}
	return 0
}

func (x *Campaign) GetCreativeURL() string {
	if x != nil {
		return x.CreativeURL
	}
	return ""
}

func (x *Campaign) GetCreativePrice() int64 {
	if x != nil {
		return x.CreativePrice
	}
	return 0
}

func (x *Campaign) GetCreativeType() int64 {
	if x != nil {
		return x.CreativeType
	}
	return 0
}

func (x *Campaign) GetCreativeUserAgeMin() int64 {
	if x != nil {
		return x.CreativeUserAgeMin
	}
	return 0
}

func (x *Campaign) GetCreativeUserAgeMax() int64 {
	if x != nil {
		return x.CreativeUserAgeMax
	}
	return 0
}

func (x *Campaign) GetCreativeUserSex() int64 {
	if x != nil {
		return x.CreativeUserSex
	}
	return 0
}

func (x *Campaign) GetCreativeTitle() string {
	if x != nil {
		return x.CreativeTitle
	}
	return ""
}

func (x *Campaign) GetCreativeDescription() string {
	if x != nil {
		return x.CreativeDescription
	}
	return ""
}

func (x *Campaign) GetCreativeImage() string {
	if x != nil {
		return x.CreativeImage
	}
	return ""
}

func (x *Campaign) GetCreativeIcon() string {
	if x != nil {
		return x.CreativeIcon
	}
	return ""
}

func (x *Campaign) GetCreativePaymentType() int64 {
	if x != nil {
		return x.CreativePaymentType
	}
	return 0
}

func (x *Campaign) GetCreativePaymentTarget() int64 {
	if x != nil {
		return x.CreativePaymentTarget
	}
	return 0
}

func (x *Campaign) GetTargetSubscriptionAgeFrom() int64 {
	if x != nil {
		return x.TargetSubscriptionAgeFrom
	}
	return 0
}

func (x *Campaign) GetTargetSubscriptionAgeTo() int64 {
	if x != nil {
		return x.TargetSubscriptionAgeTo
	}
	return 0
}

func (x *Campaign) GetFastFilterSourceIDStr() string {
	if x != nil {
		return x.FastFilterSourceIDStr
	}
	return ""
}

func (x *Campaign) GetFastFilterSourceIDFilterType() int64 {
	if x != nil {
		return x.FastFilterSourceIDFilterType
	}
	return 0
}

func (x *Campaign) GetSaveForSST() int64 {
	if x != nil {
		return x.SaveForSST
	}
	return 0
}

func (x *Campaign) GetFFCampaignToPublisherFilterType() int64 {
	if x != nil {
		return x.FFCampaignToPublisherFilterType
	}
	return 0
}

func (x *Campaign) GetFFCampaignToEndpointFilterType() int64 {
	if x != nil {
		return x.FFCampaignToEndpointFilterType
	}
	return 0
}

func (x *Campaign) GetFFAdvertiserToPublisherFilterType() int64 {
	if x != nil {
		return x.FFAdvertiserToPublisherFilterType
	}
	return 0
}

func (x *Campaign) GetFFAdvertiserToEndpointFilterType() int64 {
	if x != nil {
		return x.FFAdvertiserToEndpointFilterType
	}
	return 0
}

func (x *Campaign) GetStrictly() bool {
	if x != nil {
		return x.Strictly
	}
	return false
}

func (x *Campaign) GetAdvertiserCashback() float64 {
	if x != nil {
		return x.AdvertiserCashback
	}
	return 0
}

func (x *Campaign) GetProcessDoubleEvent() bool {
	if x != nil {
		return x.ProcessDoubleEvent
	}
	return false
}

func (x *Campaign) GetTrafficQuality() int64 {
	if x != nil {
		return x.TrafficQuality
	}
	return 0
}

func (x *Campaign) GetImpClickStrategy() int64 {
	if x != nil {
		return x.ImpClickStrategy
	}
	return 0
}

func (x *Campaign) GetLangTargetJSONString() string {
	if x != nil {
		return x.LangTargetJSONString
	}
	return ""
}

func (x *Campaign) GetLangTargetFilterType() int64 {
	if x != nil {
		return x.LangTargetFilterType
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     int64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	NetworkID              int64   `protobuf:"varint,2,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	Rate                   int64   `protobuf:"varint,3,opt,name=Rate,proto3" json:"Rate,omitempty"`
	Tags                   []int64 `protobuf:"varint,4,rep,packed,name=Tags,proto3" json:"Tags,omitempty"`
	UsersTagsAllow         []int64 `protobuf:"varint,5,rep,packed,name=UsersTagsAllow,proto3" json:"UsersTagsAllow,omitempty"`
	UsersTagsAllowType     int64   `protobuf:"varint,6,opt,name=UsersTagsAllowType,proto3" json:"UsersTagsAllowType,omitempty"`
	UsersTagsDeny          []int64 `protobuf:"varint,7,rep,packed,name=UsersTagsDeny,proto3" json:"UsersTagsDeny,omitempty"`
	UsersTagsDenyType      int64   `protobuf:"varint,8,opt,name=UsersTagsDenyType,proto3" json:"UsersTagsDenyType,omitempty"`
	DspsTagsAllow          []int64 `protobuf:"varint,9,rep,packed,name=DspsTagsAllow,proto3" json:"DspsTagsAllow,omitempty"`
	DspsTagsAllowType      int64   `protobuf:"varint,10,opt,name=DspsTagsAllowType,proto3" json:"DspsTagsAllowType,omitempty"`
	DspsTagsDeny           []int64 `protobuf:"varint,11,rep,packed,name=DspsTagsDeny,proto3" json:"DspsTagsDeny,omitempty"`
	DspsTagsDenyType       int64   `protobuf:"varint,12,opt,name=DspsTagsDenyType,proto3" json:"DspsTagsDenyType,omitempty"`
	CampaignsTagsAllow     []int64 `protobuf:"varint,13,rep,packed,name=CampaignsTagsAllow,proto3" json:"CampaignsTagsAllow,omitempty"`
	CampaignsTagsAllowType int64   `protobuf:"varint,14,opt,name=CampaignsTagsAllowType,proto3" json:"CampaignsTagsAllowType,omitempty"`
	CampaignsTagsDeny      []int64 `protobuf:"varint,15,rep,packed,name=CampaignsTagsDeny,proto3" json:"CampaignsTagsDeny,omitempty"`
	CampaignsTagsDenyType  int64   `protobuf:"varint,16,opt,name=CampaignsTagsDenyType,proto3" json:"CampaignsTagsDenyType,omitempty"`
	FFToDSPFilterType      int64   `protobuf:"varint,17,opt,name=FFToDSPFilterType,proto3" json:"FFToDSPFilterType,omitempty"`
	FFToUserFilterType     int64   `protobuf:"varint,18,opt,name=FFToUserFilterType,proto3" json:"FFToUserFilterType,omitempty"`
	FFToCampaignFilterType int64   `protobuf:"varint,19,opt,name=FFToCampaignFilterType,proto3" json:"FFToCampaignFilterType,omitempty"`
	Cashback               float64 `protobuf:"fixed64,20,opt,name=Cashback,proto3" json:"Cashback,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{17}
}

func (x *User) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *User) GetNetworkID() int64 {
	if x != nil {
		return x.NetworkID
	}
	return 0
}

func (x *User) GetRate() int64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *User) GetTags() []int64 {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *User) GetUsersTagsAllow() []int64 {
	if x != nil {
		return x.UsersTagsAllow
	}
	return nil
}

func (x *User) GetUsersTagsAllowType() int64 {
	if x != nil {
		return x.UsersTagsAllowType
	}
	return 0
}

func (x *User) GetUsersTagsDeny() []int64 {
	if x != nil {
		return x.UsersTagsDeny
	}
	return nil
}

func (x *User) GetUsersTagsDenyType() int64 {
	if x != nil {
		return x.UsersTagsDenyType
	}
	return 0
}

func (x *User) GetDspsTagsAllow() []int64 {
	if x != nil {
		return x.DspsTagsAllow
	}
	return nil
}

func (x *User) GetDspsTagsAllowType() int64 {
	if x != nil {
		return x.DspsTagsAllowType
	}
	return 0
}

func (x *User) GetDspsTagsDeny() []int64 {
	if x != nil {
		return x.DspsTagsDeny
	}
	return nil
}

func (x *User) GetDspsTagsDenyType() int64 {
	if x != nil {
		return x.DspsTagsDenyType
	}
	return 0
}

func (x *User) GetCampaignsTagsAllow() []int64 {
	if x != nil {
		return x.CampaignsTagsAllow
	}
	return nil
}

func (x *User) GetCampaignsTagsAllowType() int64 {
	if x != nil {
		return x.CampaignsTagsAllowType
	}
	return 0
}

func (x *User) GetCampaignsTagsDeny() []int64 {
	if x != nil {
		return x.CampaignsTagsDeny
	}
	return nil
}

func (x *User) GetCampaignsTagsDenyType() int64 {
	if x != nil {
		return x.CampaignsTagsDenyType
	}
	return 0
}

func (x *User) GetFFToDSPFilterType() int64 {
	if x != nil {
		return x.FFToDSPFilterType
	}
	return 0
}

func (x *User) GetFFToUserFilterType() int64 {
	if x != nil {
		return x.FFToUserFilterType
	}
	return 0
}

func (x *User) GetFFToCampaignFilterType() int64 {
	if x != nil {
		return x.FFToCampaignFilterType
	}
	return 0
}

func (x *User) GetCashback() float64 {
	if x != nil {
		return x.Cashback
	}
	return 0
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID                        int64   `protobuf:"varint,1,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	ID                               int64   `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	SettingsRequestType              int64   `protobuf:"varint,3,opt,name=SettingsRequestType,proto3" json:"SettingsRequestType,omitempty"`
	QueryArgsString                  string  `protobuf:"bytes,4,opt,name=QueryArgsString,proto3" json:"QueryArgsString,omitempty"`
	SettingsResponseType             int64   `protobuf:"varint,5,opt,name=SettingsResponseType,proto3" json:"SettingsResponseType,omitempty"`
	SettingsResponseTemplateItem     []byte  `protobuf:"bytes,6,opt,name=SettingsResponseTemplateItem,proto3" json:"SettingsResponseTemplateItem,omitempty"`
	SettingsResponseTemplateResponse []byte  `protobuf:"bytes,7,opt,name=SettingsResponseTemplateResponse,proto3" json:"SettingsResponseTemplateResponse,omitempty"`
	Token                            string  `protobuf:"bytes,8,opt,name=Token,proto3" json:"Token,omitempty"`
	UserID                           int64   `protobuf:"varint,9,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Rate                             int64   `protobuf:"varint,10,opt,name=Rate,proto3" json:"Rate,omitempty"`
	HiddenRate                       int64   `protobuf:"varint,11,opt,name=HiddenRate,proto3" json:"HiddenRate,omitempty"`
	Shave                            int64   `protobuf:"varint,12,opt,name=Shave,proto3" json:"Shave,omitempty"`
	SessionStorage                   int64   `protobuf:"varint,13,opt,name=SessionStorage,proto3" json:"SessionStorage,omitempty"`
	PaymentTarget                    int64   `protobuf:"varint,14,opt,name=PaymentTarget,proto3" json:"PaymentTarget,omitempty"`
	PaymentType                      int64   `protobuf:"varint,15,opt,name=PaymentType,proto3" json:"PaymentType,omitempty"`
	TrafficType                      int64   `protobuf:"varint,16,opt,name=TrafficType,proto3" json:"TrafficType,omitempty"`
	Timeout                          int64   `protobuf:"varint,17,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	TTL                              int64   `protobuf:"varint,18,opt,name=TTL,proto3" json:"TTL,omitempty"`
	TrafficCheck                     float64 `protobuf:"fixed64,19,opt,name=TrafficCheck,proto3" json:"TrafficCheck,omitempty"`
	SettingsResponseItemsJoinString  []byte  `protobuf:"bytes,20,opt,name=SettingsResponseItemsJoinString,proto3" json:"SettingsResponseItemsJoinString,omitempty"`
	Tags                             []int64 `protobuf:"varint,21,rep,packed,name=Tags,proto3" json:"Tags,omitempty"`
	UsersTagRulesAllow               []int64 `protobuf:"varint,22,rep,packed,name=UsersTagRulesAllow,proto3" json:"UsersTagRulesAllow,omitempty"`
	UsersTagRulesAllowType           int64   `protobuf:"varint,23,opt,name=UsersTagRulesAllowType,proto3" json:"UsersTagRulesAllowType,omitempty"`
	UsersTagRulesDeny                []int64 `protobuf:"varint,24,rep,packed,name=UsersTagRulesDeny,proto3" json:"UsersTagRulesDeny,omitempty"`
	UsersTagRulesDenyType            int64   `protobuf:"varint,25,opt,name=UsersTagRulesDenyType,proto3" json:"UsersTagRulesDenyType,omitempty"`
	DspsTagRulesAllow                []int64 `protobuf:"varint,26,rep,packed,name=DspsTagRulesAllow,proto3" json:"DspsTagRulesAllow,omitempty"`
	DspsTagRulesAllowType            int64   `protobuf:"varint,27,opt,name=DspsTagRulesAllowType,proto3" json:"DspsTagRulesAllowType,omitempty"`
	DspsTagRulesDeny                 []int64 `protobuf:"varint,28,rep,packed,name=DspsTagRulesDeny,proto3" json:"DspsTagRulesDeny,omitempty"`
	DspsTagRulesDenyType             int64   `protobuf:"varint,29,opt,name=DspsTagRulesDenyType,proto3" json:"DspsTagRulesDenyType,omitempty"`
	CampaignsTagRulesAllow           []int64 `protobuf:"varint,30,rep,packed,name=CampaignsTagRulesAllow,proto3" json:"CampaignsTagRulesAllow,omitempty"`
	CampaignsTagRulesAllowType       int64   `protobuf:"varint,31,opt,name=CampaignsTagRulesAllowType,proto3" json:"CampaignsTagRulesAllowType,omitempty"`
	CampaignsTagRulesDeny            []int64 `protobuf:"varint,32,rep,packed,name=CampaignsTagRulesDeny,proto3" json:"CampaignsTagRulesDeny,omitempty"`
	CampaignsTagRulesDenyType        int64   `protobuf:"varint,33,opt,name=CampaignsTagRulesDenyType,proto3" json:"CampaignsTagRulesDenyType,omitempty"`
	PassbackURL                      string  `protobuf:"bytes,34,opt,name=PassbackURL,proto3" json:"PassbackURL,omitempty"`
	TrafficCheckURL                  string  `protobuf:"bytes,35,opt,name=TrafficCheckURL,proto3" json:"TrafficCheckURL,omitempty"`
	HostClick                        []byte  `protobuf:"bytes,36,opt,name=HostClick,proto3" json:"HostClick,omitempty"`
	HostImp                          []byte  `protobuf:"bytes,37,opt,name=HostImp,proto3" json:"HostImp,omitempty"`
	HostView                         []byte  `protobuf:"bytes,38,opt,name=HostView,proto3" json:"HostView,omitempty"`
	Type                             int64   `protobuf:"varint,39,opt,name=Type,proto3" json:"Type,omitempty"`
	Destination                      int64   `protobuf:"varint,40,opt,name=Destination,proto3" json:"Destination,omitempty"`
	FastFilterSourceIDFilterType     int64   `protobuf:"varint,41,opt,name=FastFilterSourceIDFilterType,proto3" json:"FastFilterSourceIDFilterType,omitempty"`
	FastFilterSourceIDStr            string  `protobuf:"bytes,42,opt,name=FastFilterSourceIDStr,proto3" json:"FastFilterSourceIDStr,omitempty"`
	GeoFilterType                    int64   `protobuf:"varint,43,opt,name=GeoFilterType,proto3" json:"GeoFilterType,omitempty"`
	GeoFilterMapStr                  string  `protobuf:"bytes,44,opt,name=GeoFilterMapStr,proto3" json:"GeoFilterMapStr,omitempty"`
	ProcessDoubleEvent               bool    `protobuf:"varint,45,opt,name=ProcessDoubleEvent,proto3" json:"ProcessDoubleEvent,omitempty"`
	DatacenterID                     int64   `protobuf:"varint,46,opt,name=DatacenterID,proto3" json:"DatacenterID,omitempty"`
	StopWords                        string  `protobuf:"bytes,47,opt,name=StopWords,proto3" json:"StopWords,omitempty"`
	CreativeCheckRate                float64 `protobuf:"fixed64,48,opt,name=CreativeCheckRate,proto3" json:"CreativeCheckRate,omitempty"`
	CreativeCheckLimit               float64 `protobuf:"fixed64,49,opt,name=CreativeCheckLimit,proto3" json:"CreativeCheckLimit,omitempty"`
	TrafficCheckNotifyURL            string  `protobuf:"bytes,50,opt,name=TrafficCheckNotifyURL,proto3" json:"TrafficCheckNotifyURL,omitempty"`
	FastFilterRefererFilterType      int64   `protobuf:"varint,51,opt,name=FastFilterRefererFilterType,proto3" json:"FastFilterRefererFilterType,omitempty"`
	FastFilterRefererStr             string  `protobuf:"bytes,52,opt,name=FastFilterRefererStr,proto3" json:"FastFilterRefererStr,omitempty"`
	OpenRTBNativeWrappedRequest      bool    `protobuf:"varint,53,opt,name=OpenRTBNativeWrappedRequest,proto3" json:"OpenRTBNativeWrappedRequest,omitempty"`
	OpenRTBNativeAssetTypeIcon       int64   `protobuf:"varint,54,opt,name=OpenRTBNativeAssetTypeIcon,proto3" json:"OpenRTBNativeAssetTypeIcon,omitempty"`
	OpenRTBNativeAssetTypeImage      int64   `protobuf:"varint,55,opt,name=OpenRTBNativeAssetTypeImage,proto3" json:"OpenRTBNativeAssetTypeImage,omitempty"`
	OverrideAllReferrers             bool    `protobuf:"varint,56,opt,name=OverrideAllReferrers,proto3" json:"OverrideAllReferrers,omitempty"`
	OverrideReferrersListText        string  `protobuf:"bytes,57,opt,name=OverrideReferrersListText,proto3" json:"OverrideReferrersListText,omitempty"`
	OpenRTBTrackers                  int64   `protobuf:"varint,58,opt,name=OpenRTBTrackers,proto3" json:"OpenRTBTrackers,omitempty"`
	RateLimitMax                     int64   `protobuf:"varint,59,opt,name=RateLimitMax,proto3" json:"RateLimitMax,omitempty"`
	FastFilterUserFilterType         int64   `protobuf:"varint,60,opt,name=FastFilterUserFilterType,proto3" json:"FastFilterUserFilterType,omitempty"`
	FastFilterDSPFilterType          int64   `protobuf:"varint,61,opt,name=FastFilterDSPFilterType,proto3" json:"FastFilterDSPFilterType,omitempty"`
	FastFilterCampaignFilterType     int64   `protobuf:"varint,62,opt,name=FastFilterCampaignFilterType,proto3" json:"FastFilterCampaignFilterType,omitempty"`
	Sandbox                          bool    `protobuf:"varint,63,opt,name=Sandbox,proto3" json:"Sandbox,omitempty"`
	Strictly                         bool    `protobuf:"varint,64,opt,name=Strictly,proto3" json:"Strictly,omitempty"`
	ChargeReject                     bool    `protobuf:"varint,65,opt,name=ChargeReject,proto3" json:"ChargeReject,omitempty"`
	TrafficQuality                   int64   `protobuf:"varint,66,opt,name=TrafficQuality,proto3" json:"TrafficQuality,omitempty"`
	FilterPlatform                   int64   `protobuf:"varint,67,opt,name=FilterPlatform,proto3" json:"FilterPlatform,omitempty"`
	OsDesktopJSONString              string  `protobuf:"bytes,68,opt,name=OsDesktopJSONString,proto3" json:"OsDesktopJSONString,omitempty"`
	OsMobileJSONString               string  `protobuf:"bytes,69,opt,name=OsMobileJSONString,proto3" json:"OsMobileJSONString,omitempty"`
	UaDesktopJSONString              string  `protobuf:"bytes,70,opt,name=UaDesktopJSONString,proto3" json:"UaDesktopJSONString,omitempty"`
	UaMobileJSONString               string  `protobuf:"bytes,71,opt,name=UaMobileJSONString,proto3" json:"UaMobileJSONString,omitempty"`
	DesktopOSFilterType              int64   `protobuf:"varint,72,opt,name=DesktopOSFilterType,proto3" json:"DesktopOSFilterType,omitempty"`
	DesktopUAFilterType              int64   `protobuf:"varint,73,opt,name=DesktopUAFilterType,proto3" json:"DesktopUAFilterType,omitempty"`
	MobileOSFilterType               int64   `protobuf:"varint,74,opt,name=MobileOSFilterType,proto3" json:"MobileOSFilterType,omitempty"`
	MobileUAFilterType               int64   `protobuf:"varint,75,opt,name=MobileUAFilterType,proto3" json:"MobileUAFilterType,omitempty"`
	IgnoreDSPff                      bool    `protobuf:"varint,76,opt,name=IgnoreDSPff,proto3" json:"IgnoreDSPff,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{18}
}

func (x *Endpoint) GetNetworkID() int64 {
	if x != nil {
		return x.NetworkID
	}
	return 0
}

func (x *Endpoint) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Endpoint) GetSettingsRequestType() int64 {
	if x != nil {
		return x.SettingsRequestType
	}
	return 0
}

func (x *Endpoint) GetQueryArgsString() string {
	if x != nil {
		return x.QueryArgsString
	}
	return ""
}

func (x *Endpoint) GetSettingsResponseType() int64 {
	if x != nil {
		return x.SettingsResponseType
	}
	return 0
}

func (x *Endpoint) GetSettingsResponseTemplateItem() []byte {
	if x != nil {
		return x.SettingsResponseTemplateItem
	}
	return nil
}

func (x *Endpoint) GetSettingsResponseTemplateResponse() []byte {
	if x != nil {
		return x.SettingsResponseTemplateResponse
	}
	return nil
}

func (x *Endpoint) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Endpoint) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Endpoint) GetRate() int64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Endpoint) GetHiddenRate() int64 {
	if x != nil {
		return x.HiddenRate
	}
	return 0
}

func (x *Endpoint) GetShave() int64 {
	if x != nil {
		return x.Shave
	}
	return 0
}

func (x *Endpoint) GetSessionStorage() int64 {
	if x != nil {
		return x.SessionStorage
	}
	return 0
}

func (x *Endpoint) GetPaymentTarget() int64 {
	if x != nil {
		return x.PaymentTarget
	}
	return 0
}

func (x *Endpoint) GetPaymentType() int64 {
	if x != nil {
		return x.PaymentType
	}
	return 0
}

func (x *Endpoint) GetTrafficType() int64 {
	if x != nil {
		return x.TrafficType
	}
	return 0
}

func (x *Endpoint) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Endpoint) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *Endpoint) GetTrafficCheck() float64 {
	if x != nil {
		return x.TrafficCheck
	}
	return 0
}

func (x *Endpoint) GetSettingsResponseItemsJoinString() []byte {
	if x != nil {
		return x.SettingsResponseItemsJoinString
	}
	return nil
}

func (x *Endpoint) GetTags() []int64 {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Endpoint) GetUsersTagRulesAllow() []int64 {
	if x != nil {
		return x.UsersTagRulesAllow
	}
	return nil
}

func (x *Endpoint) GetUsersTagRulesAllowType() int64 {
	if x != nil {
		return x.UsersTagRulesAllowType
	}
	return 0
}

func (x *Endpoint) GetUsersTagRulesDeny() []int64 {
	if x != nil {
		return x.UsersTagRulesDeny
	}
	return nil
}

func (x *Endpoint) GetUsersTagRulesDenyType() int64 {
	if x != nil {
		return x.UsersTagRulesDenyType
	}
	return 0
}

func (x *Endpoint) GetDspsTagRulesAllow() []int64 {
	if x != nil {
		return x.DspsTagRulesAllow
	}
	return nil
}

func (x *Endpoint) GetDspsTagRulesAllowType() int64 {
	if x != nil {
		return x.DspsTagRulesAllowType
	}
	return 0
}

func (x *Endpoint) GetDspsTagRulesDeny() []int64 {
	if x != nil {
		return x.DspsTagRulesDeny
	}
	return nil
}

func (x *Endpoint) GetDspsTagRulesDenyType() int64 {
	if x != nil {
		return x.DspsTagRulesDenyType
	}
	return 0
}

func (x *Endpoint) GetCampaignsTagRulesAllow() []int64 {
	if x != nil {
		return x.CampaignsTagRulesAllow
	}
	return nil
}

func (x *Endpoint) GetCampaignsTagRulesAllowType() int64 {
	if x != nil {
		return x.CampaignsTagRulesAllowType
	}
	return 0
}

func (x *Endpoint) GetCampaignsTagRulesDeny() []int64 {
	if x != nil {
		return x.CampaignsTagRulesDeny
	}
	return nil
}

func (x *Endpoint) GetCampaignsTagRulesDenyType() int64 {
	if x != nil {
		return x.CampaignsTagRulesDenyType
	}
	return 0
}

func (x *Endpoint) GetPassbackURL() string {
	if x != nil {
		return x.PassbackURL
	}
	return ""
}

func (x *Endpoint) GetTrafficCheckURL() string {
	if x != nil {
		return x.TrafficCheckURL
	}
	return ""
}

func (x *Endpoint) GetHostClick() []byte {
	if x != nil {
		return x.HostClick
	}
	return nil
}

func (x *Endpoint) GetHostImp() []byte {
	if x != nil {
		return x.HostImp
	}
	return nil
}

func (x *Endpoint) GetHostView() []byte {
	if x != nil {
		return x.HostView
	}
	return nil
}

func (x *Endpoint) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Endpoint) GetDestination() int64 {
	if x != nil {
		return x.Destination
	}
	return 0
}

func (x *Endpoint) GetFastFilterSourceIDFilterType() int64 {
	if x != nil {
		return x.FastFilterSourceIDFilterType
	}
	return 0
}

func (x *Endpoint) GetFastFilterSourceIDStr() string {
	if x != nil {
		return x.FastFilterSourceIDStr
	}
	return ""
}

func (x *Endpoint) GetGeoFilterType() int64 {
	if x != nil {
		return x.GeoFilterType
	}
	return 0
}

func (x *Endpoint) GetGeoFilterMapStr() string {
	if x != nil {
		return x.GeoFilterMapStr
	}
	return ""
}

func (x *Endpoint) GetProcessDoubleEvent() bool {
	if x != nil {
		return x.ProcessDoubleEvent
	}
	return false
}

func (x *Endpoint) GetDatacenterID() int64 {
	if x != nil {
		return x.DatacenterID
	}
	return 0
}

func (x *Endpoint) GetStopWords() string {
	if x != nil {
		return x.StopWords
	}
	return ""
}

func (x *Endpoint) GetCreativeCheckRate() float64 {
	if x != nil {
		return x.CreativeCheckRate
	}
	return 0
}

func (x *Endpoint) GetCreativeCheckLimit() float64 {
	if x != nil {
		return x.CreativeCheckLimit
	}
	return 0
}

func (x *Endpoint) GetTrafficCheckNotifyURL() string {
	if x != nil {
		return x.TrafficCheckNotifyURL
	}
	return ""
}

func (x *Endpoint) GetFastFilterRefererFilterType() int64 {
	if x != nil {
		return x.FastFilterRefererFilterType
	}
	return 0
}

func (x *Endpoint) GetFastFilterRefererStr() string {
	if x != nil {
		return x.FastFilterRefererStr
	}
	return ""
}

func (x *Endpoint) GetOpenRTBNativeWrappedRequest() bool {
	if x != nil {
		return x.OpenRTBNativeWrappedRequest
	}
	return false
}

func (x *Endpoint) GetOpenRTBNativeAssetTypeIcon() int64 {
	if x != nil {
		return x.OpenRTBNativeAssetTypeIcon
	}
	return 0
}

func (x *Endpoint) GetOpenRTBNativeAssetTypeImage() int64 {
	if x != nil {
		return x.OpenRTBNativeAssetTypeImage
	}
	return 0
}

func (x *Endpoint) GetOverrideAllReferrers() bool {
	if x != nil {
		return x.OverrideAllReferrers
	}
	return false
}

func (x *Endpoint) GetOverrideReferrersListText() string {
	if x != nil {
		return x.OverrideReferrersListText
	}
	return ""
}

func (x *Endpoint) GetOpenRTBTrackers() int64 {
	if x != nil {
		return x.OpenRTBTrackers
	}
	return 0
}

func (x *Endpoint) GetRateLimitMax() int64 {
	if x != nil {
		return x.RateLimitMax
	}
	return 0
}

func (x *Endpoint) GetFastFilterUserFilterType() int64 {
	if x != nil {
		return x.FastFilterUserFilterType
	}
	return 0
}

func (x *Endpoint) GetFastFilterDSPFilterType() int64 {
	if x != nil {
		return x.FastFilterDSPFilterType
	}
	return 0
}

func (x *Endpoint) GetFastFilterCampaignFilterType() int64 {
	if x != nil {
		return x.FastFilterCampaignFilterType
	}
	return 0
}

func (x *Endpoint) GetSandbox() bool {
	if x != nil {
		return x.Sandbox
	}
	return false
}

func (x *Endpoint) GetStrictly() bool {
	if x != nil {
		return x.Strictly
	}
	return false
}

func (x *Endpoint) GetChargeReject() bool {
	if x != nil {
		return x.ChargeReject
	}
	return false
}

func (x *Endpoint) GetTrafficQuality() int64 {
	if x != nil {
		return x.TrafficQuality
	}
	return 0
}

func (x *Endpoint) GetFilterPlatform() int64 {
	if x != nil {
		return x.FilterPlatform
	}
	return 0
}

func (x *Endpoint) GetOsDesktopJSONString() string {
	if x != nil {
		return x.OsDesktopJSONString
	}
	return ""
}

func (x *Endpoint) GetOsMobileJSONString() string {
	if x != nil {
		return x.OsMobileJSONString
	}
	return ""
}

func (x *Endpoint) GetUaDesktopJSONString() string {
	if x != nil {
		return x.UaDesktopJSONString
	}
	return ""
}

func (x *Endpoint) GetUaMobileJSONString() string {
	if x != nil {
		return x.UaMobileJSONString
	}
	return ""
}

func (x *Endpoint) GetDesktopOSFilterType() int64 {
	if x != nil {
		return x.DesktopOSFilterType
	}
	return 0
}

func (x *Endpoint) GetDesktopUAFilterType() int64 {
	if x != nil {
		return x.DesktopUAFilterType
	}
	return 0
}

func (x *Endpoint) GetMobileOSFilterType() int64 {
	if x != nil {
		return x.MobileOSFilterType
	}
	return 0
}

func (x *Endpoint) GetMobileUAFilterType() int64 {
	if x != nil {
		return x.MobileUAFilterType
	}
	return 0
}

func (x *Endpoint) GetIgnoreDSPff() bool {
	if x != nil {
		return x.IgnoreDSPff
	}
	return false
}

type FastFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name1 string `protobuf:"bytes,1,opt,name=Name1,proto3" json:"Name1,omitempty"`
	ID1   int64  `protobuf:"varint,2,opt,name=ID1,proto3" json:"ID1,omitempty"`
	Name2 string `protobuf:"bytes,3,opt,name=Name2,proto3" json:"Name2,omitempty"`
	ID2   int64  `protobuf:"varint,4,opt,name=ID2,proto3" json:"ID2,omitempty"`
}

func (x *FastFilter) Reset() {
	*x = FastFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastFilter) ProtoMessage() {}

func (x *FastFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastFilter.ProtoReflect.Descriptor instead.
func (*FastFilter) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{19}
}

func (x *FastFilter) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *FastFilter) GetID1() int64 {
	if x != nil {
		return x.ID1
	}
	return 0
}

func (x *FastFilter) GetName2() string {
	if x != nil {
		return x.Name2
	}
	return ""
}

func (x *FastFilter) GetID2() int64 {
	if x != nil {
		return x.ID2
	}
	return 0
}

type Widgets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type        int64  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	NetworkID   int64  `protobuf:"varint,3,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	Token       string `protobuf:"bytes,4,opt,name=Token,proto3" json:"Token,omitempty"`
	BinderToken string `protobuf:"bytes,5,opt,name=BinderToken,proto3" json:"BinderToken,omitempty"`
	Settings    string `protobuf:"bytes,6,opt,name=Settings,proto3" json:"Settings,omitempty"`
	CountAds    int64  `protobuf:"varint,7,opt,name=CountAds,proto3" json:"CountAds,omitempty"`
	UserID      int64  `protobuf:"varint,8,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ZoneID      int64  `protobuf:"varint,9,opt,name=ZoneID,proto3" json:"ZoneID,omitempty"`
	Domains     string `protobuf:"bytes,10,opt,name=Domains,proto3" json:"Domains,omitempty"`
}

func (x *Widgets) Reset() {
	*x = Widgets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Widgets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Widgets) ProtoMessage() {}

func (x *Widgets) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Widgets.ProtoReflect.Descriptor instead.
func (*Widgets) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{20}
}

func (x *Widgets) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Widgets) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Widgets) GetNetworkID() int64 {
	if x != nil {
		return x.NetworkID
	}
	return 0
}

func (x *Widgets) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Widgets) GetBinderToken() string {
	if x != nil {
		return x.BinderToken
	}
	return ""
}

func (x *Widgets) GetSettings() string {
	if x != nil {
		return x.Settings
	}
	return ""
}

func (x *Widgets) GetCountAds() int64 {
	if x != nil {
		return x.CountAds
	}
	return 0
}

func (x *Widgets) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Widgets) GetZoneID() int64 {
	if x != nil {
		return x.ZoneID
	}
	return 0
}

func (x *Widgets) GetDomains() string {
	if x != nil {
		return x.Domains
	}
	return ""
}

type Optlists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	CampaignID  int64  `protobuf:"varint,2,opt,name=CampaignID,proto3" json:"CampaignID,omitempty"`
	IsExtra     bool   `protobuf:"varint,3,opt,name=IsExtra,proto3" json:"IsExtra,omitempty"`
	PublisherID int64  `protobuf:"varint,4,opt,name=PublisherID,proto3" json:"PublisherID,omitempty"`
}

func (x *Optlists) Reset() {
	*x = Optlists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optlists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optlists) ProtoMessage() {}

func (x *Optlists) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optlists.ProtoReflect.Descriptor instead.
func (*Optlists) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{21}
}

func (x *Optlists) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Optlists) GetCampaignID() int64 {
	if x != nil {
		return x.CampaignID
	}
	return 0
}

func (x *Optlists) GetIsExtra() bool {
	if x != nil {
		return x.IsExtra
	}
	return false
}

func (x *Optlists) GetPublisherID() int64 {
	if x != nil {
		return x.PublisherID
	}
	return 0
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69,
	0x22, 0x23, 0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x10, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x22, 0x4d, 0x0a, 0x0b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x44,
	0x53, 0x50, 0x12, 0x1e, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x53, 0x50, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x31, 0x12, 0x1e, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x53, 0x50, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x22, 0x4d, 0x0a, 0x0b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x44, 0x50,
	0x4c, 0x12, 0x1e, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x50, 0x4c, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x31, 0x12, 0x1e, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x50, 0x4c, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x22, 0x39, 0x0a, 0x12, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x44, 0x50, 0x4c, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x50, 0x4c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x10,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x0c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x35, 0x0a, 0x10, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x12, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x6a, 0x6f, 0x62, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x33, 0x0a, 0x0f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x10, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x6a, 0x6f, 0x62, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x0d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x1c, 0x0a, 0x03, 0x44, 0x53,
	0x50, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52,
	0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x36, 0x0a, 0x16, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x11, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x10, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x18, 0x13, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54,
	0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12,
	0x3c, 0x0a, 0x19, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x19, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e,
	0x79, 0x12, 0x3a, 0x0a, 0x18, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x18, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1b, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x48, 0x0a, 0x1f, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1a, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6e,
	0x79, 0x12, 0x46, 0x0a, 0x1e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x1f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x12, 0x50, 0x0a, 0x23, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x23, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1e, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x4e, 0x0a,
	0x22, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x55, 0x52, 0x4c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x55, 0x52, 0x4c, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x4d, 0x61,
	0x78, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x47, 0x65,
	0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x47,
	0x65, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x47, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x4e,
	0x55, 0x52, 0x4c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x4e, 0x55, 0x52, 0x4c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x53, 0x74, 0x72, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x53, 0x74, 0x72, 0x12, 0x42, 0x0a, 0x1c, 0x46,
	0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x44, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x53, 0x74, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x44, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x28, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x50, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x50, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x41, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x41, 0x4d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x6e, 0x44, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x4f,
	0x6e, 0x44, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x1c, 0x46, 0x61, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x46,
	0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x44, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x44,
	0x70, 0x6c, 0x49, 0x44, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x44, 0x70, 0x6c, 0x49,
	0x44, 0x12, 0x40, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x54, 0x42, 0x45, 0x78, 0x74, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x54, 0x42, 0x45, 0x78, 0x74, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x52, 0x54, 0x42, 0x45, 0x78, 0x74, 0x49, 0x6d, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x54,
	0x42, 0x45, 0x78, 0x74, 0x49, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x46, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x46, 0x46, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x46, 0x46, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x46, 0x46, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4c, 0x0a, 0x21, 0x46, 0x46, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x46, 0x46,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x20, 0x46, 0x46, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x20, 0x46, 0x46, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x45,
	0x73, 0x63, 0x61, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x54, 0x42, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x54, 0x42, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6c, 0x79, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x4d,
	0x61, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4d, 0x61, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x2e, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6d, 0x70, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x44, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x49, 0x6d, 0x70, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x73, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4a, 0x53,
	0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x4f, 0x73, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4a,
	0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x4f, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x55, 0x61, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x55, 0x61, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x61, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x55, 0x61, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x4f, 0x53, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x53, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x55, 0x41, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x55, 0x41, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x4f, 0x53, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4f, 0x53, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x55, 0x41, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x55, 0x41, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x6c,
	0x6c, 0x57, 0x69, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x43,
	0x61, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x55, 0x52, 0x4c, 0x22, 0x23, 0x0a, 0x03, 0x44, 0x50, 0x4c,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x0c, 0x0a, 0x01, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x44, 0x22, 0xf2,
	0x01, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x50, 0x4c, 0x12, 0x1c, 0x0a,
	0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x50, 0x4c, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x50, 0x4c, 0x30, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x50, 0x4c, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44,
	0x50, 0x4c, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x50, 0x4c, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x44, 0x50, 0x4c, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x50, 0x4c, 0x33, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x50, 0x4c, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x50, 0x4c, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x50, 0x4c, 0x34, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x50, 0x4c, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44,
	0x50, 0x4c, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x50, 0x4c, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x44, 0x50, 0x4c, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x50, 0x4c, 0x37, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x50, 0x4c, 0x37, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x50, 0x4c, 0x38, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x50, 0x4c, 0x38, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x50, 0x4c, 0x39, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44,
	0x50, 0x4c, 0x39, 0x22, 0xa8, 0x21, 0x0a, 0x08, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x61, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x43, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x4a,
	0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x47, 0x65, 0x6f, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x24,
	0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x47, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x49, 0x53, 0x50, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x49, 0x53, 0x50, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x53,
	0x50, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x49, 0x53, 0x50, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x4f, 0x73, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4a, 0x53, 0x4f,
	0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4f,
	0x73, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4a, 0x53,
	0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x4f, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x55, 0x61, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4a,
	0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x55, 0x61, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x61, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x55, 0x61, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x50, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4f, 0x70, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x50, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x70,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x4f, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x50, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x4f, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x50, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x4f, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x53, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x1a, 0x4f, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53,
	0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x4f, 0x70, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x53, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x53, 0x50, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4f, 0x70,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x53, 0x50, 0x12, 0x30, 0x0a, 0x13,
	0x4f, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x53, 0x50, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x4f, 0x70, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x53, 0x50, 0x12, 0x30,
	0x0a, 0x13, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x53, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x44, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x53, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x55, 0x41, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x55, 0x41, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4f, 0x53, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4f, 0x53, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x55, 0x41, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x55, 0x41, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x68, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x68, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x50, 0x4d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x50, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2a,
	0x0a, 0x10, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x41, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x55, 0x41, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x26, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x11, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x28, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x10, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x44, 0x65, 0x6e, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x3c,
	0x0a, 0x19, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x19, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x44, 0x65, 0x6e, 0x79, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x79,
	0x12, 0x3a, 0x0a, 0x18, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x18, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x18, 0x2e,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1b, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x48, 0x0a, 0x1f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x31,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x1a, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6e, 0x79,
	0x12, 0x46, 0x0a, 0x1e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x33, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x1f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x12, 0x50, 0x0a, 0x23, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x23, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x35, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1e, 0x41, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x4e, 0x0a, 0x22,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54,
	0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x48, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x50, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x48, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x50,
	0x12, 0x28, 0x0a, 0x0f, 0x48, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x49, 0x50, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x48, 0x61, 0x73, 0x4f, 0x70,
	0x74, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x50, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x61,
	0x73, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x44, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x48, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x48, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x53, 0x49, 0x44, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x48, 0x61, 0x73, 0x4f,
	0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x53, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x48, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x53, 0x50, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x48, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x53, 0x50, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x74, 0x49, 0x53, 0x50, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x48, 0x61,
	0x73, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x49, 0x53, 0x50, 0x12, 0x38,
	0x0a, 0x17, 0x48, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53, 0x49, 0x44, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x48, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x53, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x44, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x42, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x4d, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x4d, 0x61, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x78, 0x18, 0x44, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x78, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x54,
	0x6f, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x54, 0x6f,
	0x12, 0x34, 0x0a, 0x15, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x53, 0x74, 0x72, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x44, 0x53, 0x74, 0x72, 0x12, 0x42, 0x0a, 0x1c, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x46, 0x61,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61,
	0x76, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x53, 0x54, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x53, 0x61, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x53, 0x54, 0x12, 0x48, 0x0a, 0x1f, 0x46, 0x46,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1f, 0x46, 0x46, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54,
	0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x46, 0x46, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x46, 0x46,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x21,
	0x46, 0x46, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x46, 0x46, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x46, 0x46,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x20, 0x46, 0x46, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x6c, 0x79, 0x18, 0x54, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72,
	0x43, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x55, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x43, 0x61, 0x73, 0x68, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x56, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x57, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6d,
	0x70, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x49, 0x6d, 0x70, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x59,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x61,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xaa,
	0x06, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x61, 0x67, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x61,
	0x67, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x61,
	0x67, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x54, 0x61, 0x67, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x54, 0x61, 0x67, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x61, 0x67,
	0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x73, 0x70,
	0x73, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0d, 0x44, 0x73, 0x70, 0x73, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12,
	0x2c, 0x0a, 0x11, 0x44, 0x73, 0x70, 0x73, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x44, 0x73, 0x70, 0x73,
	0x54, 0x61, 0x67, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x73, 0x70, 0x73, 0x54, 0x61, 0x67, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0c, 0x44, 0x73, 0x70, 0x73, 0x54, 0x61, 0x67, 0x73, 0x44, 0x65, 0x6e,
	0x79, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x73, 0x70, 0x73, 0x54, 0x61, 0x67, 0x73, 0x44, 0x65, 0x6e,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x44, 0x73, 0x70,
	0x73, 0x54, 0x61, 0x67, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x36, 0x0a,
	0x16, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x73, 0x54, 0x61, 0x67, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x11, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x73, 0x44,
	0x65, 0x6e, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73,
	0x54, 0x61, 0x67, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x61, 0x67,
	0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x46, 0x54,
	0x6f, 0x44, 0x53, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x46, 0x46, 0x54, 0x6f, 0x44, 0x53, 0x50, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x46, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x46, 0x46, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x46, 0x46, 0x54, 0x6f, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x46, 0x46, 0x54, 0x6f, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x43, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xba, 0x1a, 0x0a, 0x08,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x72, 0x67, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x67, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4a, 0x0a, 0x20, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x20, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x76,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x68, 0x61, 0x76, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54,
	0x4c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x48, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1f, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x16, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x36,
	0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54,
	0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x44, 0x65, 0x6e, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x61, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x73,
	0x70, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x44, 0x73, 0x70, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x73, 0x70, 0x73,
	0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x44, 0x73, 0x70, 0x73, 0x54, 0x61, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x44, 0x73, 0x70, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x65,
	0x6e, 0x79, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x44, 0x73, 0x70, 0x73, 0x54, 0x61,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x73,
	0x70, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x44, 0x73, 0x70, 0x73, 0x54, 0x61,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x18,
	0x20, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73,
	0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x3c, 0x0a, 0x19,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x19, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61,
	0x73, 0x73, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x50, 0x61, 0x73, 0x73, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x12, 0x28, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x1c, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x53, 0x74, 0x72, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x53, 0x74, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x65,
	0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x47, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x47, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x47, 0x65, 0x6f, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x61,
	0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x55, 0x52, 0x4c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x52, 0x4c,
	0x12, 0x40, 0x0a, 0x1b, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x53, 0x74, 0x72, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x72, 0x53, 0x74, 0x72, 0x12, 0x40, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x54,
	0x42, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x54, 0x42, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x54, 0x42, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x4f, 0x70,
	0x65, 0x6e, 0x52, 0x54, 0x42, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x54, 0x42, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x54, 0x42, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x73, 0x12, 0x3c,
	0x0a, 0x19, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x4f, 0x70, 0x65, 0x6e, 0x52, 0x54, 0x42, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x54, 0x42, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x3a, 0x0a, 0x18, 0x46, 0x61,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x46, 0x61,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x44, 0x53, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x44, 0x53, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x42, 0x0a, 0x1c, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6c, 0x79, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x30,
	0x0a, 0x13, 0x4f, 0x73, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x73, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x73,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x30, 0x0a, 0x13, 0x55, 0x61, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4a, 0x53, 0x4f,
	0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x55,
	0x61, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x61, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4a, 0x53,
	0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x55, 0x61, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x53, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x53, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x55,
	0x41, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x55, 0x41, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x4f, 0x53, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x4a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4f, 0x53, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x55, 0x41, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x55, 0x41, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x44, 0x53, 0x50, 0x66, 0x66, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x44, 0x53, 0x50, 0x66, 0x66, 0x22, 0x5c, 0x0a, 0x0a, 0x46, 0x61, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x31, 0x12, 0x10, 0x0a, 0x03,
	0x49, 0x44, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x49, 0x44, 0x31, 0x12, 0x14,
	0x0a, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x49, 0x44, 0x32, 0x22, 0x85, 0x02, 0x0a, 0x07, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x5a, 0x6f,
	0x6e, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x7c,
	0x0a, 0x08, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x49, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x44, 0x32, 0xc6, 0x06, 0x0a,
	0x08, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x12, 0x30, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x44, 0x53, 0x50, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x44, 0x53, 0x50, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x44, 0x50, 0x4c, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x44, 0x50, 0x4c, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x50, 0x4c, 0x12, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f,
	0x62, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x50, 0x4c, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x46, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x46, 0x61, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x53, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x4f,
	0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x49, 0x50, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x4f, 0x70, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x53,
	0x50, 0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x4f, 0x70, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x49, 0x44,
	0x4f, 0x70, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x4f, 0x70, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x6a, 0x6f, 0x62, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x35,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x12, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x6a, 0x6f, 0x62, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_api_proto_goTypes = []interface{}{
	(*BinderRequest)(nil),      // 0: api.BinderRequest
	(*CachejobResponse)(nil),   // 1: api.CachejobResponse
	(*CachejobDSP)(nil),        // 2: api.CachejobDSP
	(*CachejobDPL)(nil),        // 3: api.CachejobDPL
	(*CachejobDefaultDPL)(nil), // 4: api.CachejobDefaultDPL
	(*CachejobCampaign)(nil),   // 5: api.CachejobCampaign
	(*CachejobUser)(nil),       // 6: api.CachejobUser
	(*CachejobEndpoint)(nil),   // 7: api.CachejobEndpoint
	(*CachejobFastFilter)(nil), // 8: api.CachejobFastFilter
	(*CachejobWidgets)(nil),    // 9: api.CachejobWidgets
	(*CachejobOptlists)(nil),   // 10: api.CachejobOptlists
	(*CachejobPing)(nil),       // 11: api.CachejobPing
	(*CachejobToken)(nil),      // 12: api.CachejobToken
	(*DSP)(nil),                // 13: api.DSP
	(*DPL)(nil),                // 14: api.DPL
	(*DefaultDPL)(nil),         // 15: api.DefaultDPL
	(*Campaign)(nil),           // 16: api.Campaign
	(*User)(nil),               // 17: api.User
	(*Endpoint)(nil),           // 18: api.Endpoint
	(*FastFilter)(nil),         // 19: api.FastFilter
	(*Widgets)(nil),            // 20: api.Widgets
	(*Optlists)(nil),           // 21: api.Optlists
}
var file_api_proto_depIdxs = []int32{
	13, // 0: api.CachejobDSP.data1:type_name -> api.DSP
	13, // 1: api.CachejobDSP.data2:type_name -> api.DSP
	14, // 2: api.CachejobDPL.data1:type_name -> api.DPL
	14, // 3: api.CachejobDPL.data2:type_name -> api.DPL
	15, // 4: api.CachejobDefaultDPL.data:type_name -> api.DefaultDPL
	16, // 5: api.CachejobCampaign.data:type_name -> api.Campaign
	17, // 6: api.CachejobUser.data:type_name -> api.User
	18, // 7: api.CachejobEndpoint.data:type_name -> api.Endpoint
	19, // 8: api.CachejobFastFilter.data:type_name -> api.FastFilter
	20, // 9: api.CachejobWidgets.data:type_name -> api.Widgets
	21, // 10: api.CachejobOptlists.data:type_name -> api.Optlists
	0,  // 11: api.Cachejob.GetDSP:input_type -> api.BinderRequest
	0,  // 12: api.Cachejob.GetDPL:input_type -> api.BinderRequest
	0,  // 13: api.Cachejob.GetDefaultDPL:input_type -> api.BinderRequest
	0,  // 14: api.Cachejob.GetCampaign:input_type -> api.BinderRequest
	0,  // 15: api.Cachejob.GetUser:input_type -> api.BinderRequest
	0,  // 16: api.Cachejob.GetEndpoint:input_type -> api.BinderRequest
	0,  // 17: api.Cachejob.GetFastFilter:input_type -> api.BinderRequest
	0,  // 18: api.Cachejob.GetWidgets:input_type -> api.BinderRequest
	0,  // 19: api.Cachejob.GetForeignSIDOptlists:input_type -> api.BinderRequest
	0,  // 20: api.Cachejob.GetIPOptlists:input_type -> api.BinderRequest
	0,  // 21: api.Cachejob.GetISPOptlists:input_type -> api.BinderRequest
	0,  // 22: api.Cachejob.GetSIDOptlists:input_type -> api.BinderRequest
	0,  // 23: api.Cachejob.PingCachejob:input_type -> api.BinderRequest
	0,  // 24: api.Cachejob.GetTokens:input_type -> api.BinderRequest
	2,  // 25: api.Cachejob.GetDSP:output_type -> api.CachejobDSP
	3,  // 26: api.Cachejob.GetDPL:output_type -> api.CachejobDPL
	4,  // 27: api.Cachejob.GetDefaultDPL:output_type -> api.CachejobDefaultDPL
	5,  // 28: api.Cachejob.GetCampaign:output_type -> api.CachejobCampaign
	6,  // 29: api.Cachejob.GetUser:output_type -> api.CachejobUser
	7,  // 30: api.Cachejob.GetEndpoint:output_type -> api.CachejobEndpoint
	8,  // 31: api.Cachejob.GetFastFilter:output_type -> api.CachejobFastFilter
	9,  // 32: api.Cachejob.GetWidgets:output_type -> api.CachejobWidgets
	10, // 33: api.Cachejob.GetForeignSIDOptlists:output_type -> api.CachejobOptlists
	10, // 34: api.Cachejob.GetIPOptlists:output_type -> api.CachejobOptlists
	10, // 35: api.Cachejob.GetISPOptlists:output_type -> api.CachejobOptlists
	10, // 36: api.Cachejob.GetSIDOptlists:output_type -> api.CachejobOptlists
	11, // 37: api.Cachejob.PingCachejob:output_type -> api.CachejobPing
	12, // 38: api.Cachejob.GetTokens:output_type -> api.CachejobToken
	25, // [25:39] is the sub-list for method output_type
	11, // [11:25] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachejobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachejobDSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachejobDPL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachejobDefaultDPL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachejobCampaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachejobUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachejobEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachejobFastFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachejobWidgets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachejobOptlists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachejobPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachejobToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultDPL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Campaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Widgets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optlists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CachejobClient is the client API for Cachejob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CachejobClient interface {
	GetDSP(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobDSP, error)
	GetDPL(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobDPL, error)
	GetDefaultDPL(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobDefaultDPL, error)
	GetCampaign(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobCampaign, error)
	GetUser(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobUser, error)
	GetEndpoint(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobEndpoint, error)
	GetFastFilter(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobFastFilter, error)
	GetWidgets(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobWidgets, error)
	GetForeignSIDOptlists(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobOptlists, error)
	GetIPOptlists(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobOptlists, error)
	GetISPOptlists(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobOptlists, error)
	GetSIDOptlists(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobOptlists, error)
	PingCachejob(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobPing, error)
	GetTokens(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobToken, error)
}

type cachejobClient struct {
	cc grpc.ClientConnInterface
}

func NewCachejobClient(cc grpc.ClientConnInterface) CachejobClient {
	return &cachejobClient{cc}
}

func (c *cachejobClient) GetDSP(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobDSP, error) {
	out := new(CachejobDSP)
	err := c.cc.Invoke(ctx, "/api.Cachejob/GetDSP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachejobClient) GetDPL(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobDPL, error) {
	out := new(CachejobDPL)
	err := c.cc.Invoke(ctx, "/api.Cachejob/GetDPL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachejobClient) GetDefaultDPL(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobDefaultDPL, error) {
	out := new(CachejobDefaultDPL)
	err := c.cc.Invoke(ctx, "/api.Cachejob/GetDefaultDPL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachejobClient) GetCampaign(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobCampaign, error) {
	out := new(CachejobCampaign)
	err := c.cc.Invoke(ctx, "/api.Cachejob/GetCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachejobClient) GetUser(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobUser, error) {
	out := new(CachejobUser)
	err := c.cc.Invoke(ctx, "/api.Cachejob/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachejobClient) GetEndpoint(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobEndpoint, error) {
	out := new(CachejobEndpoint)
	err := c.cc.Invoke(ctx, "/api.Cachejob/GetEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachejobClient) GetFastFilter(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobFastFilter, error) {
	out := new(CachejobFastFilter)
	err := c.cc.Invoke(ctx, "/api.Cachejob/GetFastFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachejobClient) GetWidgets(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobWidgets, error) {
	out := new(CachejobWidgets)
	err := c.cc.Invoke(ctx, "/api.Cachejob/GetWidgets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachejobClient) GetForeignSIDOptlists(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobOptlists, error) {
	out := new(CachejobOptlists)
	err := c.cc.Invoke(ctx, "/api.Cachejob/GetForeignSIDOptlists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachejobClient) GetIPOptlists(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobOptlists, error) {
	out := new(CachejobOptlists)
	err := c.cc.Invoke(ctx, "/api.Cachejob/GetIPOptlists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachejobClient) GetISPOptlists(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobOptlists, error) {
	out := new(CachejobOptlists)
	err := c.cc.Invoke(ctx, "/api.Cachejob/GetISPOptlists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachejobClient) GetSIDOptlists(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobOptlists, error) {
	out := new(CachejobOptlists)
	err := c.cc.Invoke(ctx, "/api.Cachejob/GetSIDOptlists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachejobClient) PingCachejob(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobPing, error) {
	out := new(CachejobPing)
	err := c.cc.Invoke(ctx, "/api.Cachejob/PingCachejob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachejobClient) GetTokens(ctx context.Context, in *BinderRequest, opts ...grpc.CallOption) (*CachejobToken, error) {
	out := new(CachejobToken)
	err := c.cc.Invoke(ctx, "/api.Cachejob/GetTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CachejobServer is the server API for Cachejob service.
type CachejobServer interface {
	GetDSP(context.Context, *BinderRequest) (*CachejobDSP, error)
	GetDPL(context.Context, *BinderRequest) (*CachejobDPL, error)
	GetDefaultDPL(context.Context, *BinderRequest) (*CachejobDefaultDPL, error)
	GetCampaign(context.Context, *BinderRequest) (*CachejobCampaign, error)
	GetUser(context.Context, *BinderRequest) (*CachejobUser, error)
	GetEndpoint(context.Context, *BinderRequest) (*CachejobEndpoint, error)
	GetFastFilter(context.Context, *BinderRequest) (*CachejobFastFilter, error)
	GetWidgets(context.Context, *BinderRequest) (*CachejobWidgets, error)
	GetForeignSIDOptlists(context.Context, *BinderRequest) (*CachejobOptlists, error)
	GetIPOptlists(context.Context, *BinderRequest) (*CachejobOptlists, error)
	GetISPOptlists(context.Context, *BinderRequest) (*CachejobOptlists, error)
	GetSIDOptlists(context.Context, *BinderRequest) (*CachejobOptlists, error)
	PingCachejob(context.Context, *BinderRequest) (*CachejobPing, error)
	GetTokens(context.Context, *BinderRequest) (*CachejobToken, error)
}

// UnimplementedCachejobServer can be embedded to have forward compatible implementations.
type UnimplementedCachejobServer struct {
}

func (*UnimplementedCachejobServer) GetDSP(context.Context, *BinderRequest) (*CachejobDSP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDSP not implemented")
}
func (*UnimplementedCachejobServer) GetDPL(context.Context, *BinderRequest) (*CachejobDPL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDPL not implemented")
}
func (*UnimplementedCachejobServer) GetDefaultDPL(context.Context, *BinderRequest) (*CachejobDefaultDPL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultDPL not implemented")
}
func (*UnimplementedCachejobServer) GetCampaign(context.Context, *BinderRequest) (*CachejobCampaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaign not implemented")
}
func (*UnimplementedCachejobServer) GetUser(context.Context, *BinderRequest) (*CachejobUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedCachejobServer) GetEndpoint(context.Context, *BinderRequest) (*CachejobEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpoint not implemented")
}
func (*UnimplementedCachejobServer) GetFastFilter(context.Context, *BinderRequest) (*CachejobFastFilter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFastFilter not implemented")
}
func (*UnimplementedCachejobServer) GetWidgets(context.Context, *BinderRequest) (*CachejobWidgets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWidgets not implemented")
}
func (*UnimplementedCachejobServer) GetForeignSIDOptlists(context.Context, *BinderRequest) (*CachejobOptlists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForeignSIDOptlists not implemented")
}
func (*UnimplementedCachejobServer) GetIPOptlists(context.Context, *BinderRequest) (*CachejobOptlists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPOptlists not implemented")
}
func (*UnimplementedCachejobServer) GetISPOptlists(context.Context, *BinderRequest) (*CachejobOptlists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetISPOptlists not implemented")
}
func (*UnimplementedCachejobServer) GetSIDOptlists(context.Context, *BinderRequest) (*CachejobOptlists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSIDOptlists not implemented")
}
func (*UnimplementedCachejobServer) PingCachejob(context.Context, *BinderRequest) (*CachejobPing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingCachejob not implemented")
}
func (*UnimplementedCachejobServer) GetTokens(context.Context, *BinderRequest) (*CachejobToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}

func RegisterCachejobServer(s *grpc.Server, srv CachejobServer) {
	s.RegisterService(&_Cachejob_serviceDesc, srv)
}

func _Cachejob_GetDSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).GetDSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/GetDSP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).GetDSP(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cachejob_GetDPL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).GetDPL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/GetDPL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).GetDPL(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cachejob_GetDefaultDPL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).GetDefaultDPL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/GetDefaultDPL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).GetDefaultDPL(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cachejob_GetCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).GetCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/GetCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).GetCampaign(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cachejob_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).GetUser(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cachejob_GetEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).GetEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/GetEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).GetEndpoint(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cachejob_GetFastFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).GetFastFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/GetFastFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).GetFastFilter(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cachejob_GetWidgets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).GetWidgets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/GetWidgets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).GetWidgets(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cachejob_GetForeignSIDOptlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).GetForeignSIDOptlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/GetForeignSIDOptlists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).GetForeignSIDOptlists(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cachejob_GetIPOptlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).GetIPOptlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/GetIPOptlists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).GetIPOptlists(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cachejob_GetISPOptlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).GetISPOptlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/GetISPOptlists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).GetISPOptlists(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cachejob_GetSIDOptlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).GetSIDOptlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/GetSIDOptlists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).GetSIDOptlists(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cachejob_PingCachejob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).PingCachejob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/PingCachejob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).PingCachejob(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cachejob_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachejobServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cachejob/GetTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachejobServer).GetTokens(ctx, req.(*BinderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cachejob_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Cachejob",
	HandlerType: (*CachejobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDSP",
			Handler:    _Cachejob_GetDSP_Handler,
		},
		{
			MethodName: "GetDPL",
			Handler:    _Cachejob_GetDPL_Handler,
		},
		{
			MethodName: "GetDefaultDPL",
			Handler:    _Cachejob_GetDefaultDPL_Handler,
		},
		{
			MethodName: "GetCampaign",
			Handler:    _Cachejob_GetCampaign_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Cachejob_GetUser_Handler,
		},
		{
			MethodName: "GetEndpoint",
			Handler:    _Cachejob_GetEndpoint_Handler,
		},
		{
			MethodName: "GetFastFilter",
			Handler:    _Cachejob_GetFastFilter_Handler,
		},
		{
			MethodName: "GetWidgets",
			Handler:    _Cachejob_GetWidgets_Handler,
		},
		{
			MethodName: "GetForeignSIDOptlists",
			Handler:    _Cachejob_GetForeignSIDOptlists_Handler,
		},
		{
			MethodName: "GetIPOptlists",
			Handler:    _Cachejob_GetIPOptlists_Handler,
		},
		{
			MethodName: "GetISPOptlists",
			Handler:    _Cachejob_GetISPOptlists_Handler,
		},
		{
			MethodName: "GetSIDOptlists",
			Handler:    _Cachejob_GetSIDOptlists_Handler,
		},
		{
			MethodName: "PingCachejob",
			Handler:    _Cachejob_PingCachejob_Handler,
		},
		{
			MethodName: "GetTokens",
			Handler:    _Cachejob_GetTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
